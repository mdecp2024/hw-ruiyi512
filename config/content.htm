<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-ruiyi512">github-ruiyi512</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-ruiyi512/content/index.html">41323107</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/MesJhMbv4Bo" width="560"></iframe></p>
<p><span>程式碼逐行解釋： </span></p>
<p><span>a = "我已經會寫簡單的python 程式。" 這一行將字串 "我已經會寫簡單的python 程式。" </span></p>
<p><span>賦值給變數 a。 for i in range(1, 11): 這是一個 for 迴圈，使用 range(1, 11) 生成從 1 到 10（不包含 11）的數字，並依次將每個數字賦值給變數 i。</span></p>
<p><span> print(i, a) 在每次迴圈中，程式會執行 print() 函數，輸出當前的變數 i（數字）和變數 a（字串）的值。 </span></p>
<p><span>結果： 程式將輸出以下內容，每一行包含一個數字（從 1 到 10）和相同的字串： </span></p>
<p><span>1 我已經會寫簡單的python 程式。 </span></p>
<p><span>2 我已經會寫簡單的python 程式。 </span></p>
<p><span>3 我已經會寫簡單的python 程式。 </span></p>
<p><span>4 我已經會寫簡單的python 程式。 </span></p>
<p><span>5 我已經會寫簡單的python 程式。 </span></p>
<p><span>6 我已經會寫簡單的python 程式。 </span></p>
<p><span>7 我已經會寫簡單的python 程式。 </span></p>
<p><span>8 我已經會寫簡單的python 程式。 </span></p>
<p><span>9 我已經會寫簡單的python 程式。 </span></p>
<p><span>10 我已經會寫簡單的python 程式。</span></p>
<p><span></span></p>
<h3>w9</h3>
<p><span>w9_triangle_1</span></p>
<p><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/d640283c79a5366218bf265c090391ee/raw/2d8084b606ae7ee1f1f66b9bd3e986f39d8740b5/w9_triangle_1.py"><span><span style="color: #ff0000;"><span style="color: #000000;">https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html</span>?src=</span><span style="color: #000000;">https://gist.githubusercontent.com/ruiyi512/d640283c79a5366218bf265c090391ee/raw/2d8084b606ae7ee1f1f66b9bd3e986f39d8740b5/w9_triangle_1.py</span></span></a></p>
<p><span></span></p>
<p><span>w9_triangle_2</span></p>
<p><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/642a10389d1a38f70e8fe1c6d93dbe14/raw/edda1fe42edb23a71802bb87ce8dd0ce166ffaed/w9_triangle_2.py"><span><span style="color: #ff0000;"><span style="color: #000000;">https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html</span>?src=</span><span style="color: #000000;">https://gist.githubusercontent.com/ruiyi512/642a10389d1a38f70e8fe1c6d93dbe14/raw/edda1fe42edb23a71802bb87ce8dd0ce166ffaed/w9_triangle_2.py</span></span></a></p>
<p><span></span></p>
<h3>w10</h3>
<p><span>隨堂考試</span></p>
<p><strong>題目一: </strong></p>
<p><strong>Brython_triangle</strong></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/xg2g5LL3NNY" width="560"></iframe></span></p>
<p><strong>SciTE 編輯器_triangle</strong></p>
<p><strong><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ebtHxKfFzGs" width="560"></iframe></strong></p>
<p><strong>命令提示字元視窗_triangle</strong></p>
<p><strong><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/K-LiSambapA" width="560"></iframe></strong></p>
<p><strong>Jupyter Lab_triangle</strong></p>
<p><strong><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/AhCn3m8r9Sg" width="560"></iframe></strong></p>
<p><strong>Codespaces _triangle</strong></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/3mCOOpNh9d8" width="560"></iframe></span></p>
<p><strong>題目二: </strong></p>
<p><strong><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ylGQywjiM2E" width="560"></iframe></strong><strong><br/></strong></p>
<p><strong>題目三:</strong></p>
<p><strong><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/-xHqcqIWOY8" width="560"></iframe></strong></p>
<p><strong></strong></p>
<p>綜合心得:</p>
<p>      同樣語言在不同環境下依然可以穩定運行真的很棒，使用者介面、存檔、開啟方式等對我而言都覺得還好，我學習數種CAD、CAE、CAM軟體，我認為相容性較為重要，連網的所以相對方便，但錄製時因為網路很差導致需要網路的線上版Jupyter Lab&amp;Codespacestl超難用，學習五種環境依照當下狀態有更多選擇真的很棒。我很想將ESP使用網頁介面控制，查詢資料後也是使用C++還有網頁相互配合，這門課真的收穫滿滿，也很難用幾句話描述學習的東西，因為就是基礎，就是我需要的。</p>
<h3>w11_hw</h3>
<p><strong>11x11 的字元區域中, 以 "*" 字元列印出圓型區域. </strong></p>
<p><span style="color: #000000;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/3b4894311aeadc71420646d3aef05e3a/raw/06a704e97a279ef047053bbefeedd3ef61ae38fb/Round*" style="color: #000000;">Round</a></span></p>
<p><strong><span style="color: #000000;">改進</span></strong></p>
<p><span style="color: #000000;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/e4885adb8d17151ba7900a421e84bc27/raw/0c83d446dac343edb24469c38a520fbf8ba8f093/Round2*" style="color: #000000;">Round2</a></span></p>
<p><strong><span style="color: #000000;">像素繪製圓形</span></strong></p>
<p><span style="color: #000000;"><a class="wb-break-all" href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/a9d8b74100c43e1e289f2387ac261af3/raw/81207ab3e8ab341a0a7df7de488b44de4de37632/Pixel%2520drawing%2520circle_1" style="color: #000000;">Pixel drawing circle_1</a></span></p>
<p><br/><a href="https://fictional-happiness-wr7r5756xr73gvvj-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/e4885adb8d17151ba7900a421e84bc27/raw/0c83d446dac343edb24469c38a520fbf8ba8f093/Round2*"></a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_qymVrxNuwg" width="560"></iframe></p>
<p></p>
<p><strong>解題過程與心得</strong></p>
<hr/>
<h4><strong>解題過程</strong></h4>
<ol>
<li>
<p><strong>需求分析</strong><br/>初始目標是根據使用者的要求，使用 Brython 在 HTML 中實現一個可以互動繪圖的功能，具體需求如下：</p>
<ul>
<li>繪製圓形，提供更細緻、更圓潤的效果。</li>
<li>增加控制功能：可以動態調整格數、圓形的大小、位置和顏色。</li>
<li>增加按鈕執行的功能，讓用戶操作更加便捷。</li>
</ul>
</li>
<li>
<p><strong>功能拆解</strong></p>
<ul>
<li><strong>網格繪製</strong>：基於使用者指定的格數，實現畫布的動態網格化。</li>
<li><strong>圓形繪製</strong>：通過數學計算點與圓心的距離，實現圓形內部填充與邊緣漸變效果。</li>
<li><strong>顏色控制</strong>：添加顏色選擇器，通過 HEX 顏色轉換為 RGB 處理。</li>
<li><strong>互動功能</strong>：允許使用者點擊畫布或者輸入參數後執行畫圖。</li>
<li><strong>重繪功能</strong>：設置初始化按鈕，方便使用者清除畫布並重新配置。</li>
</ul>
</li>
<li>
<p><strong>程式撰寫</strong></p>
<ul>
<li>利用 Brython 實現畫布的繪圖邏輯，結合 HTML 的輸入框和按鈕構建互動式界面。</li>
<li>通過 <code>fill</code> 函數處理每個格子的位置與顏色，確保繪製圓形時邊緣更加平滑。</li>
<li>利用 Python 的邏輯控制流程來動態繪製圓形和重設畫布。</li>
</ul>
</li>
<li>
<p><strong>測試與優化</strong></p>
<ul>
<li>測試畫布的邊界行為，確保圓形在邊緣不會超出可視範圍。</li>
<li>調整網格格數（5 至 50），驗證在不同分辨率下的圓形渲染效果。</li>
<li>優化按鈕與輸入框的交互流程，讓界面操作更加直觀。</li>
</ul>
</li>
</ol>
<hr/>
<h4><strong>心得</strong></h4>
<ol>
<li>
<p><strong>挑戰</strong><br/>在限制條件下，要用 11x11 或更小的像素網格生成圓形，考驗了如何利用數學計算來處理邊緣的平滑度與透明度。需要對圓的方程式和漸變邏輯進行多次調整。</p>
</li>
<li>
<p><strong>解決方案</strong></p>
<ul>
<li>引入 <code>rgba</code> 通道實現透明度處理，使得圓形的邊緣漸變更自然。</li>
<li>設置靈活的參數輸入功能（如格數、顏色、圓心座標），增加了程式的泛用性。</li>
</ul>
</li>
<li>
<p><strong>學習收穫</strong></p>
<ul>
<li>掌握了 Brython 與 HTML 元件的結合使用，特別是在互動界面設計上的應用。</li>
<li>深化了對幾何學的理解，尤其是圓形的數學描述和像素化渲染原理。</li>
<li>瞭解了如何使用顏色模型進行動態圖形處理，讓程式具備更高的可玩性和用戶體驗。</li>
</ul>
</li>
<li>
<p><strong>下一步優化方向</strong></p>
<ul>
<li>增加更高階的幾何圖形支持，例如橢圓、多邊形等。</li>
<li>引入滑桿或拖拽功能，讓使用者直接通過拖動滑桿調整參數值，進一步提升操作體驗。</li>
<li>優化畫布效能，支持更大範圍的格數與畫布尺寸。</li>
</ul>
</li>
</ol>
<p><span></span></p>
<h3>w12_hw</h3>
<p><span style="background-color: #ffffff; color: #000000;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/f85bfae4ea1e63f7580c55be076d4edb/raw/8d575dfa003ba82eec8b42293e2affa458458a58/w12_for_print" style="background-color: #ffffff; color: #000000;"><strong class="user-select-contain gist-blob-name css-truncate-target">for&amp;print</strong> 1-&gt;5</a></span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ozrU5gYkRgk" width="560"></iframe></span></p>
<p><span>https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=</span></p>
<p><span style="text-decoration: underline;"><span style="color: #000000; text-decoration: underline;"><a class="wb-break-all" href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/a09d983937efbb97d02ad554d0ac4cda/raw/9639365c8919038f260c3ff5ce5fbd59f90facfc/w12_1" style="color: #000000; text-decoration: underline;">w12_1</a></span></span></p>
<p><span style="text-decoration: underline;"><span style="color: #000000; text-decoration: underline;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/07afdb537cabb8107d68f8254dd79ce1/raw/f4fff4b055e0480221a237b9ecdf6ffc3e88059a/w12_2" style="color: #000000; text-decoration: underline;">w12_2</a></span></span></p>
<p><span style="text-decoration: underline;"><span style="color: #000000; text-decoration: underline;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/25c390f19d4f9b2eb2defe3ca7981ae4/raw/c80465dd55062984ff020556654b4d73edd6c05c/w12_3" style="color: #000000; text-decoration: underline;">w12_3</a></span></span></p>
<p><span style="text-decoration: underline;"><span style="color: #000000; text-decoration: underline;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/45da7bf5ebd3ca39471ca049acc8ab5c/raw/c73db38604f5573881ccc4d7fac1fd595aa859b0/w12_4" style="color: #000000; text-decoration: underline;">w12_4</a></span></span></p>
<p><span style="text-decoration: underline;"><span style="color: #000000; text-decoration: underline;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/88b37bb3a757b64a6b8a621c103420d7/raw/46381a65d6dcfa14222439f41b865f4c358ac755/w12_5" style="color: #000000; text-decoration: underline;">w12_5</a></span></span></p>
<p><span style="color: #000000;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/44d869b90a433bf15866cfca779ef98a/raw/6b222250fe15249c1eb441e0fb68502560155f42/w12_6" style="color: #000000;">w12_6</a></span></p>
<p><span style="text-decoration: underline;">w12_7</span></p>
<p><span style="text-decoration: underline;">w12_8</span></p>
<p><span style="text-decoration: underline;">w12_9</span></p>
<p><span style="text-decoration: underline;">w12_10</span></p>
<p><span style="text-decoration: underline;"><strong></strong></span></p>
<p><span style="text-decoration: underline;"><strong></strong></span></p>
<h3>w13_hw</h3>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 導入 brython 程式庫 --></p>
<p>
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<div><strong><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Dau8oaAlfv8" width="560"></iframe></strong></div>
<div><strong>建立畫布</strong></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math
  
# 創建畫布
def create_canvas():
    # 創建一個500x500像素的畫布
    canvas = html.CANVAS(width=500, height=500)
    # 獲取ID為"brython_div1"的容器
    brython_div = doc["brython_div1"]
    # 將畫布添加到容器中
    brython_div <= canvas
    return canvas

# 在畫布上繪圖
def draw_shapes(canvas):
    # 獲取2D繪圖上下文
    ctx = canvas.getContext("2d")
    # 設置所有圖形的線條寬度
    ctx.lineWidth = 4

    # 設置混合模式為"screen"，用於顏色混合
    ctx.globalCompositeOperation = "screen"

    # 黑色邊框的圓形（每個有四個部分）
    ctx.strokeStyle = 'black'

    # 第一個圓形
    colors1 = ["Turquoise", "Tomato", "SpringGreen", "FloralWhite"]
    angles1 = [
        (0.25 * math.pi, 0.75 * math.pi),  # 第1部分
        (0.75 * math.pi, 1.25 * math.pi),  # 第2部分
        (1.25 * math.pi, 1.75 * math.pi),  # 第3部分
        (1.75 * math.pi, 0.25 * math.pi),  # 第4部分
    ]

    for i in range(4):
        # 繪製第一個圓形的每個部分
        ctx.beginPath()
        ctx.arc(160, 160, 141, angles1[i][0], angles1[i][1])
        ctx.fillStyle = colors1[i]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪部分的邊框

    # 第二個圓形
    colors2 = ["Purple", "OliveDrab", "Orange", "MediumVioletRed"]
    angles2 = [
        (1.25 * math.pi, 1.75 * math.pi),  # 第1部分
        (1.75 * math.pi, 0.25 * math.pi),  # 第2部分
        (0.25 * math.pi, 0.75 * math.pi),  # 第3部分
        (0.75 * math.pi, 1.25 * math.pi),  # 第4部分
    ]

    for i in range(4):
        # 繪製第二個圓形的每個部分
        ctx.beginPath()
        ctx.arc(260, 260, 141, angles2[i][0], angles2[i][1])
        ctx.fillStyle = colors2[i]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪部分的邊框

    # 兩個方形中的紅色三角形
    ctx.strokeStyle = 'red'

    # 第一個方形
    coords1 = [
        ((60, 60), (60, 260), (260, 260), "Gold"),  # 第一個三角形
        ((60, 60), (260, 60), (260, 260), "Indigo"),  # 第二個三角形
    ]

    for coord in coords1:
        # 繪製第一個方形中的每個三角形
        ctx.beginPath()
        ctx.moveTo(*coord[0])  # 移動到第一個頂點
        ctx.lineTo(*coord[1])  # 繪製到第二個頂點
        ctx.lineTo(*coord[2])  # 繪製到第三個頂點
        ctx.fillStyle = coord[3]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪三角形的邊框

    # 第二個方形
    coords2 = [
        ((160, 160), (360, 160), (360, 360), "Cyan"),  # 第一個三角形
        ((160, 160), (160, 360), (360, 360), "SpringGreen"),  # 第二個三角形
    ]

    for coord in coords2:
        # 繪製第二個方形中的每個三角形
        ctx.beginPath()
        ctx.moveTo(*coord[0])  # 移動到第一個頂點
        ctx.lineTo(*coord[1])  # 繪製到第二個頂點
        ctx.lineTo(*coord[2])  # 繪製到第三個頂點
        ctx.fillStyle = coord[3]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪三角形的邊框

    # 重疊的小方形
    coords3 = [
        ((160, 160), (160, 260), (260, 260), "Turquoise"),  # 第一個三角形
        ((160, 160), (260, 160), (260, 260), "SlateBlue"),  # 第二個三角形
    ]

    for coord in coords3:
        # 繪製小方形中的每個三角形
        ctx.beginPath()
        ctx.moveTo(*coord[0])  # 移動到第一個頂點
        ctx.lineTo(*coord[1])  # 繪製到第二個頂點
        ctx.lineTo(*coord[2])  # 繪製到第三個頂點
        ctx.fillStyle = coord[3]  # 設置填充顏色
        ctx.fill()
        ctx.stroke()  # 描繪三角形的邊框

    # 藍色對角線
    ctx.strokeStyle = 'blue'
    ctx.beginPath()
    ctx.moveTo(60, 60)  # 線條的起點
    ctx.lineTo(260, 260)  # 線條的終點
    ctx.stroke()

# 主執行部分
canvas = create_canvas()  # 創建畫布
draw_shapes(canvas)  # 繪製所有圖形
</script>
</p>
<ul>
<li>定義 create_canvas 函式。</li>
<li>html.CANVAS(width=500, height=500): 建立一個 500x500 像素的 HTML 畫布。</li>
<li>brython_div = doc["brython_div1"]: 將畫布加到 HTML 中一個 ID 為 brython_div1 的容器。</li>
<li>brython_div &lt;= canvas: 把畫布元素添加到容器中。</li>
<li>return canvas: 返回建立的畫布對象。</li>
</ul>
<p><strong>畫圖函式</strong></p>
<ul>
<li>定義 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">draw_shapes</code>，接收畫布作為參數。</li>
<li><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx = canvas.getContext("2d")</code>: 獲取 2D 繪圖上下文，用於畫圖。</li>
<li><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.lineWidth = 4</code>: 設定線條寬度為 4。</li>
</ul>
<p><strong>混合模式</strong></p>
<ul>
<li><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.globalCompositeOperation = "screen"</code>: 設定混合模式為 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">screen</code>，用於實現顏色混合效果。</li>
</ul>
<p><strong>繪製第一個圓形</strong></p>
<ul>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.strokeStyle = 'black'</code>: 設定圓形邊框顏色為黑色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">定義 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">colors1</code> 和 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">angles1</code>，分別表示每個圓弧的顏色和起止角度。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">for i in range(4):</code>: 繪製四段圓弧。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.arc(160, 160, 141, angles1[i][0], angles1[i][1])</code>: 繪製圓弧，圓心在 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">(160, 160)</code>，半徑為 141。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.fillStyle = colors1[i]</code>: 設定填充顏色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.fill()</code>: 填充圓弧內部。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.stroke()</code>: 描繪圓弧邊框。<strong></strong></li>
</ul>
<p><strong>繪製第二個圓形</strong></p>
<ul>
<li>與第一個圓相同，繪製第二個圓，但位置為 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">(260, 260)</code>，並使用 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">colors2</code> 和 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">angles2</code> 定義的顏色與角度。</li>
</ul>
<p><strong>繪製第一個方形中的三角形</strong></p>
<ul>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">設定邊框顏色為紅色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">使用 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">coords1</code> 定義第一個方形內的兩個三角形頂點與填充顏色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.moveTo(*coord[0])</code>: 移動畫筆到三角形的第一個頂點。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.lineTo(*coord[1])</code> 和 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.lineTo(*coord[2])</code>: 繪製兩條邊。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.fillStyle = coord[3]</code>: 設定三角形填充顏色。</li>
<li data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453"><code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.fill()</code> 和 <code data-immersive-translate-walked="c1c06eaf-be74-42cb-bb45-adbb897f5453">ctx.stroke()</code>: 填充與描邊。</li>
</ul>
<h3>w15</h3>
<p><span style="color: #ff6600;">1.<a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/d4d5a79327330292becc5d1a8491ae82/raw/f724f59fe843a1e3c9e797b5c61f5f181bc3c3ee/w15_1" style="color: #ff6600;">從 1 累加到 100</a></span></p>
<p><span style="color: #ff6600;">2.<a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/82168ff2979819c3450fdaa68e9f2047/raw/4e859b3a2710b5f867ba2a52fac442845dfbba5a/w15_2" style="color: #ff6600;">addto</a></span></p>
<p>題目要求與設計思考</p>
<p><strong>要求</strong>：設計一個函式 <code><span style="color: #000000;">addto</span>(start, end)</code>，將從 <code>start</code> 累加到 <code>end</code> (包含 <code>end</code> 本身)。</p>
<p><strong>設計思考</strong>：</p>
<ol>
<li>
<p>Python 中累加整數區間最簡易的手法是使用 <code>range()</code> 函式生成序列，然後用 <code>sum()</code> 將其加總。</p>
</li>
<li>
<p><code>range(start, end+1)</code> 會產生從 <code>start</code> 到 <code>end</code> 的所有整數值。</p>
</li>
<li>
<p>最後將此序列直接套入 <code>sum()</code> 即可得到區間總和。</p>
</li>
</ol>
<p><strong>程式碼範例</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">"""addto"""
def addto(start, end):
    return sum(range(start, end + 1))

# 範例呼叫
result = addto(1, 100)
print(result)  # 輸出 5050
</pre>
<p><strong>程式碼逐行解說</strong></p>
<ul>
<li>
<p><code>def addto(start, end):</code><br/>定義一個函式名稱為 <code>addto</code>，有兩個參數 <code>start</code> 與 <code>end</code>，代表加總的起始值和結束值。</p>
</li>
<li>
<p><code>return sum(range(start, end + 1))</code><br/><code>range(start, end+1)</code> 會產生從 <code>start</code> 到 <code>end</code> 的整數序列。例如 <code>range(1, 101)</code> 代表 1 到 100。<br/><code>sum(...)</code> 會將 <code>range()</code> 所產生的整數相加。<br/>使用 <code>return</code> 將計算結果回傳給呼叫端。</p>
</li>
<li>
<p><code>result = addto(1, 100)</code><br/>呼叫 <code>addto(1, 100)</code>，會得到 1 加到 100 的總和結果，預期是 5050。</p>
</li>
<li>
<p><code>print(result)</code><br/>將計算的結果印出來。</p>
<p></p>
</li>
</ul>
<p><strong>執行結果與心得</strong></p>
<p>執行後結果為 <code>5050</code>，符合數學上高斯求和公式 <code>(100*101)/2</code> 的結果。<br/>透過內建函式 <code>sum()</code> 與 <code>range()</code>，能快速且直觀地完成區間加總。</p>
<p><span style="color: #ff6600;">3.<a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/9809bd28083a84b5c2d61f64b2f70b8e/raw/e251207de65929233c630aec440be920b875ece0/w15_3" style="color: #ff6600;">add_only_even</a></span></p>
<p><strong>題目要求與設計思考</strong></p>
<p><strong>要求</strong>：設計一個函式 <code>add_only_even(start, end)</code>，將從 <code>start</code> 累加到 <code>end</code>，但只加偶數。</p>
<p><strong>設計思考</strong>：</p>
<ol>
<li>
<p>除了使用 <code>sum(range())</code>，我們需要過濾只加偶數，因此有兩種思路：</p>
<ul>
<li>
<p>使用條件判斷 <code>if num % 2 == 0</code> 在迴圈中累加。</p>
</li>
<li>
<p>或使用 list comprehension 與 sum 搭配條件篩選。</p>
</li>
</ul>
</li>
<li>
<p>在此範例中，我們選擇單純迴圈判斷，較直觀易懂。</p>
</li>
</ol>
<p><strong>程式碼範例</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">"""add_only_even"""
def add_only_even(start, end):
    total = 0
    for num in range(start, end + 1):
        if num % 2 == 0:
            total += num
    return total

# 範例呼叫
result = add_only_even(1, 100)
print(result)  # 將輸出 2 + 4 + 6 + ... + 100 的和
</pre>
<p><strong>程式碼逐行解說</strong></p>
<ul>
<li>
<p><code>def add_only_even(start, end):</code><br/>定義函式 <code>add_only_even</code>，接收兩個參數用於決定加總的範圍。</p>
</li>
<li>
<p><code>total = 0</code><br/>初始化一個計數器變數 <code>total</code> 為 0，將用來累加符合條件的整數。</p>
</li>
<li>
<p><code>for num in range(start, end + 1):</code><br/>使用 <code>range(start, end+1)</code> 從 <code>start</code> 整數循序到 <code>end</code> 整數進行迭代。</p>
</li>
<li>
<p><code>if num % 2 == 0:</code><br/>使用 <code>%</code> 運算子判斷 <code>num</code> 是否為偶數（被2整除餘數為0即為偶數）。</p>
</li>
<li>
<p><code>total += num</code><br/>如果是偶數，就將 <code>num</code> 的值加到 <code>total</code> 變數中，不斷累加。</p>
</li>
<li>
<p><code>return total</code><br/>當迴圈結束後，將累加結果回傳。</p>
</li>
<li>
<p><code>result = add_only_even(1, 100)</code><br/>呼叫該函式以計算 1 到 100 之間的偶數加總。</p>
</li>
<li>
<p><code>print(result)</code><br/>印出結果。</p>
</li>
</ul>
<p><strong>執行結果與心得</strong></p>
<p>執行後結果為 <code>2550</code>。這是 2 + 4 + 6 + ... + 100 的總和。<br/>過程中充分利用 <code>if</code> 條件與迴圈來篩選特定的值，對程式碼的控制流程很直覺明白。</p>
<p><span style="color: #ff6600;">4.<a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/f0f58b1332fa369701354a2a213f5491/raw/369c0abe184155bb9d77cc2a4e9c3832dbc8fce6/w15_4" style="color: #ff6600;">add_avoid_8</a></span></p>
<p><strong>題目要求與設計思考</strong></p>
<p><strong>要求</strong>：設計一個函式 <code>add_avoid_8(start, end)</code>，將從 <code>start</code> 累加到 <code>end</code>，但凡是數字中出現 <code>8</code> 這個數字都要避開 (不加到總和中)。</p>
<p><strong>設計思考</strong>：</p>
<ol>
<li>
<p>關鍵在於 "避開出現8的數字"。我們需對每個整數檢查其字串表現形式是否包含字元 <code>'8'</code>。</p>
</li>
<li>
<p>將整數 <code>num</code> 轉成字串 <code>str(num)</code>，用 <code>'8' in str(num)</code> 來判斷是否包含8這個字元。</p>
</li>
<li>
<p>若不包含 <code>8</code>，則將 <code>num</code> 累加。</p>
</li>
</ol>
<p><strong>程式碼範例</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(start, end):
    total = 0
    for num in range(start, end + 1):
        if '8' not in str(num):
            total += num
    return total

result = add_avoid_8(1, 100)
print(result)  # 預計會把所有帶有8的數字如 8, 18, 28, 38, 48, 58, 68, 78, 80~89, 98 排除
</pre>
<p><strong>程式碼逐行解說</strong></p>
<ul>
<li>
<p><code>def add_avoid_8(start, end):</code><br/>定義函式名稱 <code>add_avoid_8</code>，有兩個參數 <code>start</code>、<code>end</code>。</p>
</li>
<li>
<p><code>total = 0</code><br/>將累加用的變數初始化為0。</p>
</li>
<li>
<p><code>for num in range(start, end + 1):</code><br/>對從 <code>start</code> 到 <code>end</code> 間的每一個整數 <code>num</code> 進行迭代。</p>
</li>
<li>
<p><code>if '8' not in str(num):</code><br/>將 <code>num</code> 轉為字串後，檢查字串中是否包含 <code>8</code> 字元。<br/>若不包含，就表示此數字沒有出現數字「8」，符合條件。</p>
</li>
<li>
<p><code>total += num</code><br/>若符合條件(不含8)，則將該 <code>num</code> 加入 <code>total</code>。</p>
</li>
<li>
<p><code>return total</code><br/>迴圈執行完畢後，回傳最終的累加結果。</p>
</li>
<li>
<p><code>result = add_avoid_8(1, 100)</code><br/>呼叫該函式，以計算 1 到 100 中不含數字8的整數加總。</p>
</li>
<li>
<p><code>print(result)</code><br/>印出結果。</p>
</li>
</ul>
<p><strong>執行結果與心得</strong></p>
<p>執行後的結果會略小於 5050，因為移除了所有出現<code>8</code>的數字。<br/>這個題目顯示了如何透過字串判斷來排除特定條件的數字，拓展了對整數篩選的思考方式。<br/>實際執行後，可觀察結果，並藉此驗證程式碼邏輯的正確性，並可進一步測試其他範圍或條件。</p>
<p>(若欲得知實際結果，可執行程式碼。大致上，移除8、18、28、...、98及80~89共計19個數字，即移除的總和約為8 + 18 + 28 + 38 + 48 + 58 + 68 + 78 + (80到89的十個數字) + 98。透過實際執行，可確認結果正確性。)</p>
<p></p>
<p><span style="color: #ff6600;"><strong>增加條件，避開 3 數字</strong></span></p>
<p><strong>題目要求與設計思考</strong></p>
<p><strong>要求</strong>：<br/>設計一個函式 <code>add_avoid_8(start, end)</code>，從 <code>start</code> 加到 <code>end</code> (包含 <code>end</code>)，但必須避開所有<strong>數字中包含 '8' 或 '3'</strong> 的整數，也就是說，只要該數字包含 '8' 或 '3' 字元，該數字就不納入加總。</p>
<p><strong>設計思考</strong>：</p>
<ol>
<li>
<p>原先範例中是檢查 <code>'8' not in str(num)</code> 決定是否跳過該數字。</p>
</li>
<li>
<p>現在需要同時避開包含 '8' 與 '3' 的數字，因此條件需再加嚴格化，即檢查 <code>'8'</code> 與 <code>'3'</code> 都不在該數字字串中。</p>
</li>
<li>
<p>可以利用 <code>if '8' not in str(num) and '3' not in str(num):</code> 來判斷該數字是否能納入加總。</p>
</li>
</ol>
<p><strong>程式碼範例</strong></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(start, end):
    total = 0
    for num in range(start, end + 1):
        # 檢查該數字字串中是否同時不含 '8' 和 '3'
        if '8' not in str(num) and '3' not in str(num):
            total += num
    return total

# 範例呼叫
result = add_avoid_8(1, 100)
print(result)  # 將避開所有包含 '8' 或 '3' 的數字
</pre>
<p><strong>程式碼逐行解說</strong></p>
<ul>
<li>
<p><code>def add_avoid_8(start, end):</code><br/>定義函式 <code>add_avoid_8</code>，接收兩個參數 <code>start</code> 與 <code>end</code>。</p>
</li>
<li>
<p><code>total = 0</code><br/>初始化加總計數器為 0。</p>
</li>
<li>
<p><code>for num in range(start, end + 1):</code><br/>使用 <code>range(start, end+1)</code> 來逐一取得從 <code>start</code> 到 <code>end</code> 的每個整數 <code>num</code>。</p>
</li>
<li>
<p><code>if '8' not in str(num) and '3' not in str(num):</code><br/>將 <code>num</code> 轉成字串後檢查：</p>
<ul>
<li>
<p><code>'8' not in str(num)</code>：字串中不包含 '8'</p>
</li>
<li>
<p><code>'3' not in str(num)</code>：字串中不包含 '3'</p>
<p>同時成立，表示該數字中不包含 8 與 3，符合納入加總的條件。</p>
</li>
</ul>
</li>
<li>
<p><code>total += num</code><br/>若通過篩選條件，將該數值累加到 <code>total</code> 中。</p>
</li>
<li>
<p><code>return total</code><br/>當所有數字都檢視完後，回傳最終加總結果。</p>
</li>
<li>
<p><code>result = add_avoid_8(1, 100)</code><br/>呼叫函式以計算從 1 到 100，避開包含 '8' 或 '3' 的數字之和。</p>
</li>
<li>
<p><code>print(result)</code><br/>印出計算結果。</p>
</li>
</ul>
<p><strong>執行結果與心得</strong></p>
<p>這樣的條件更嚴格，會在 <code>1 ~ 100</code> 中排除任何含有 '8' 或 '3' 的整數，例如：</p>
<ul>
<li>
<p>所有帶有 '3' 的整數 (3, 13, 23, 30~39, 43, 53, 63, 73, 83, 93)</p>
</li>
<li>
<p>所有帶有 '8' 的整數 (8, 18, 28, 38, 48, 58, 68, 78, 80~89, 98)</p>
</li>
</ul>
<p>執行後的結果會小於前面只避開 '8' 的版本。此範例更進一步演示了如何利用字串檢查的方法，同時排除多個條件。透過此練習，可以在需求變動下輕鬆地修改判斷條件以達成新要求。</p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 導入 brython 程式庫 --></p>
<p>
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div <= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 檢查所有圓是否有重疊
def ensure_no_isolated_circles(circles):
    overlap = [False] * len(circles)
    for i in range(len(circles)):
        for j in range(i + 1, len(circles)):
            cx1, cy1, r1 = circles[i]
            cx2, cy2, r2 = circles[j]
            distance = math.sqrt((cx1 - cx2) ** 2 + (cy1 - cy2) ** 2)
            if distance <= r1 + r2:  # 判斷是否有重疊
                overlap[i] = True
                overlap[j] = True
    return all(overlap)

# 使用者設定的多個圓，並進行掃描線填充
def draw_circles():
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}

    # 隨機生成 5 到 10 個圓，確保沒有圓是孤立的
    while True:
        num_circles = random.randint(5, 10)
        circles = [
            (random.randint(50, 350), random.randint(50, 350), random.randint(50, 100))
            for _ in range(num_circles)
        ]
        if ensure_no_isolated_circles(circles):
            break

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            overlapping_indices = []

            for i, (cx, cy, r) in enumerate(circles):
                if is_point_in_circle(px, py, cx, cy, r):
                    overlapping_indices.append(i)

            if overlapping_indices:
                overlap_key = "_".join(map(str, sorted(overlapping_indices)))
                if overlap_key not in color_dict:
                    color_dict[overlap_key] = random_color_generator()
                current_color = color_dict[overlap_key]
            else:
                current_color = "white"

            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

draw_circles()
</script>
</p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<p>w16_exam1</p>
<!-- 導入 brython 程式庫 (路徑請依實際專案需求調整) -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 也可再次載入 (若上面有 /get_page/... 之類路徑) -->
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
      // 若你有特殊需求 debug 或指定 pythonpath 可以寫在引數中
      brython({
          debug:1, 
          pythonpath:[
              './../cmsimde/static/',
              './../downloads/py/'
          ]
      });
  }
</script>
<h3>w16_exam1</h3>
<p><span style="color: #000000;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/363ecdc1180b3fde45607fb50cecd24d/raw/409529a97cdbbe3023dc748aa322e21f90aa4837/w16_HW%25201%2520Exam" style="color: #000000;">w16_exam1</a></span></p>
<p><span style="color: #000000;"></span></p>
<ul>
<li><strong>結構化設計：</strong>
<ul>
<li>代碼清晰且層次分明，每一段都專注於繪製特定的元素，便於維護與調整。</li>
<li>使用偏移量 (<code>offset_x</code> 和 <code>offset_y</code>) 將圖形定位相對於基準點，讓圖形的重新排列變得簡單直觀。</li>
</ul>
</li>
<li><strong>多樣化形狀：</strong>
<ul>
<li>展現了如何利用 Canvas API 繪製多種幾何圖形（六邊形、菱形、三角形、圓形等）。</li>
<li>顏色搭配鮮明，區分不同形狀，提升視覺效果。</li>
</ul>
</li>
<li><strong>座標系統的應用：</strong>
<ul>
<li>通過繪製 X、Y 軸和標示原點座標，為整體設計提供了參考框架，便於後續的圖形定位。</li>
</ul>
</li>
<li><strong>Canvas API 的掌握：</strong>
<ul>
<li>熟練運用 <code>moveTo</code>、<code>lineTo</code>、<code>arc</code> 和 <code>rect</code> 等方法進行圖形繪製，展現了對 Canvas 基本功能的靈活應用。<strong>學習收穫</strong>
<ul>
<li><strong>基礎圖形構建：</strong> 深入理解 Canvas 的繪圖模型，掌握從簡單線條到複雜幾何圖形的繪製方法。</li>
<li><strong>數學與編程的結合：</strong> 通過幾何計算（如角度、圓弧等）實現形狀的精確繪製，提升數學與編程結合的能力。</li>
<li><strong>圖形座標系統的應用：</strong> 透過偏移量與基準點的設置，靈活管理圖形的佈局與結構。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p></p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><span style="color: #000000;"><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/363ecdc1180b3fde45607fb50cecd24d/raw/26170a1e71c0296fe00982e2dd6160c722648b05/w16_HW%25202%2520Exam" style="color: #000000;">w16_exam2</a></span></p>
<p><strong>程式學習收穫：</strong></p>
<p><strong>改進方向與延伸運用：</strong></p>
<ol>
<li>
<p><strong>互動式迷宮：</strong></p>
<ul>
<li>
<p>添加用戶輸入功能，例如使用鍵盤方向鍵控制迷宮中的移動。</p>
</li>
<li>
<p>在迷宮起點和終點設置指示點，用不同顏色或標誌表示，增強迷宮的互動性。</p>
</li>
</ul>
</li>
<li>
<p><strong>自動生成迷宮：</strong></p>
<ul>
<li>
<p>實現一個算法（如深度優先搜索或Prim's Algorithm），動態生成迷宮路徑，避免手動編碼迷宮結構。</p>
</li>
<li>
<p>將生成的迷宮數據存儲為陣列結構，然後根據數據繪製圖形。</p>
</li>
</ul>
</li>
<li>
<p><strong>色彩與動態：</strong></p>
<ul>
<li>
<p>在迷宮中使用不同的顏色表示牆壁、路徑和探索進度。</p>
</li>
<li>
<p>添加動畫效果，逐步展示迷宮的解路徑。</p>
</li>
</ul>
</li>
<li>
<p><strong>擴展功能：</strong></p>
<ul>
<li>
<p>將迷宮保存為圖像文件（例如 <code>.png</code>）。</p>
</li>
<li>
<p>添加計時器，讓用戶挑戰解迷宮的速度。</p>
</li>
<li>
<p>設置障礙或陷阱增加挑戰難度。</p>
</li>
</ul>
</li>
</ol>
<ul>
<li>
<p><strong>Canvas API 的應用：</strong> 深入學習 <code>beginPath()</code>、<code>moveTo()</code> 和 <code>lineTo()</code> 等核心方法，掌握如何控制圖形繪製過程。</p>
</li>
<li>
<p><strong>代碼可讀性提升：</strong> 系統性地添加註解，讓代碼不僅對自己而且對團隊成員更容易理解和修改。</p>
</li>
<li>
<p><strong>邏輯規劃：</strong> 將迷宮分段繪製，條理清晰，提升了程式設計的規劃能力。</p>
</li>
</ul>
<p><span style="color: #000000;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/s5-nxBekECM" width="560"></iframe></span></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src=https://gist.githubusercontent.com/ruiyi512/363ecdc1180b3fde45607fb50cecd24d/raw/26170a1e71c0296fe00982e2dd6160c722648b05/w16_HW%25203%2520Exam"><span style="color: #000000;">w16_exam3</span></a></p>
<p><span style="color: #000000;">起初透過chatgpt了解繪製code功能及語法，接著自行計算撰寫code，尋找對應的色碼輸入後，再將程式上傳。<br/>整個學期讓我在課堂不只學習計算機程式的內容，也讓我學會更好運用gpt來學習，也不僅僅只是copy，而是不斷詢問不理解的地方來弭補知識不足，弭補英文弱的缺點，gpt也能將我不理解的地方進行加強備註，將來再看還是能看懂。</span></p>
<ul>
<li><strong>靈活使用 HTML Canvas API</strong><br/>透過 <code>ctx.beginPath()</code> 等 API，可以有效管理繪圖路徑並避免線條相互干擾。此外，運用 <code>moveTo</code> 和 <code>lineTo</code> 等方法，清晰地描述迷宮的各部分結構，讓繪製過程井然有序。</li>
<li><strong>模組化與參數化設計</strong><br/>在程式中利用變數（如 <code>origin_x</code> 和 <code>origin_y</code>），可以輕鬆調整整體迷宮的位置偏移，讓繪圖更靈活。這種參數化的設計有助於後續維護及擴展。</li>
<li><strong>走迷宮邏輯的規劃</strong><br/>使用單獨的區塊繪製走迷宮路徑，將每一步都以簡單的線條指令表示，讓迷宮的解法可視化，直觀易懂。</li>
<li><strong>色彩與線條設置</strong><br/>運用 <code>strokeStyle</code> 和 <code>lineWidth</code>，明確區分迷宮框架與解路徑，提升圖形的可讀性和視覺效果。</li>
<li><strong>程式結構的清晰性</strong><br/>透過明確的註解，對程式的每個部分進行詳細解釋，這不僅方便日後檢視，也利於其他開發者理解。</li>
<li><strong>學習與應用 Canvas API 的實踐</strong><br/>這次實現迷宮繪製的過程提供了全面操作 Canvas 的實踐機會，涵蓋了基本線條繪製、文字繪製、色彩管理等多方面內容。</li>
<li><strong>改進空間</strong>
<ul>
<li>可以將迷宮的結構數據化，使用陣列或物件表示迷宮結構，進一步提高程式的可重用性。</li>
<li>自動生成迷宮路徑，增強互動性與挑戰性。</li>
<li>增加迷宮的動畫效果，讓視覺呈現更動態化。</li>
</ul>
</li>
</ul>
<p></p>
<p><span style="color: #000000;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/9jIPRDF1wsQ" width="560"></iframe></span></p>
<h1>期末報告</h1>
<p><span style="color: #000000;"><a href="https://docs.google.com/document/d/1BKtjcleHWal1P3UbSB4Ls2hyDMFmDiQf/edit?usp=sharing&amp;ouid=104362688980566650435&amp;rtpof=true&amp;sd=true" style="color: #000000;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></a><a href="https://docs.google.com/document/d/1A1gW4IocYcaacVhDFRwnwYP98ZrgqWgFyFf3u_xVQJo/edit?tab=t.0#heading=h.rlneo2q1xsod" style="color: #000000;">1</a><a href="https://docs.google.com/document/d/1BKtjcleHWal1P3UbSB4Ls2hyDMFmDiQf/edit" style="color: #000000;">期末報告</a><a href="https://docs.google.com/document/d/1A1gW4IocYcaacVhDFRwnwYP98ZrgqWgFyFf3u_xVQJo/edit?tab=t.0#heading=h.rlneo2q1xsod" style="color: #000000;"></a></span></p>
<p><span style="color: #000000;"><a href="https://docs.google.com/document/d/1p_AIrEzx7gyPS7142UUmsnLyAqefFF4Ck0rzNawqQKE/edit?tab=t.0#heading=h.cxutsuy3l2c6" style="color: #000000;">2</a><a href="https://docs.google.com/document/d/1rQ7UIt1P1Ky31fq175PMAeSp_odfPVSU/edit?usp=sharing&amp;ouid=104362688980566650435&amp;rtpof=true&amp;sd=true" style="color: #000000;">筆記</a></span></p>
<p><span style="color: #000000;"><a href="https://drive.google.com/file/d/1TcEbyd07aJU0a0YpsQErKTUc6ztpe2q1/view?usp=sharing" style="color: #000000;">期末報告PDF</a></span></p>
<p><span style="color: #ff6600;">W7</span><br/>a = "我已經會寫簡單的Python程式了"<br/>for i in range(1,11);<br/> print(i,a)<br/>第一行<br/>1. 變數 a：<br/>I. a 是變數名稱，用來儲存資料。<br/>II. 在 Python 中，變數可以儲存任何資料類型（例如字串、數字、列表等）。<br/>2. 字串：<br/>I. "我已經會寫簡單的Python程式了" 是一個字串（String）。<br/>II. 字串是以雙引號 " 或單引號 ' 包裹的文字資料。<br/>3. 作用：<br/>I. 將這段文字儲存在變數 a 中，之後可以透過 a 來取用或操作這段文字。</p>
<p>第二行<br/>1. 關鍵字 for<br/>* for 是用來啟動一個循環的關鍵字。<br/>* 它會依序迭代一個可迭代對象（例如列表、字串或範圍）。<br/>2. 變數 i<br/>* i 是迴圈變數，每次迴圈時都會被賦予新的值。<br/>* 在這段程式碼中，i 依次會取值 1 到 10（包含 1，但不包括 11）。<br/>3. 函數 range(1, 11)<br/>I. range() 函數生成一個範圍對象。<br/>II. 語法：range(start, stop, step)<br/>* start：起始值，這裡是 1。<br/>* stop：結束值（不包含該值），這裡是 11。<br/>* step（可選）：每次增量（預設為 1）。<br/>III. 因此，range(1, 11) 生成的值為：1, 2, 3, 4, 5, 6, 7, 8, 9, 10。<br/>4. 冒號 :<br/>I. 冒號用於結束 for 的語法並指示接下來是該迴圈內的程式塊。</p>
<p>第三行<br/>1. 在程式中，print(i, a) 的作用是：<br/>I. print：Python 的內建函式，用於輸出文字、數值或變數的內容。<br/>II. i：迴圈變數，代表目前迴圈執行的數值（從 1 到 10）。<br/>III. ,（逗號）：在 print 中，逗號用於分隔多個項目，會在輸出時以空格分隔。<br/>IV. a：這是字串變數，內容是 "我已經會寫簡單的Python程式了"。<br/><span style="color: #ff6600;">W9</span><br/>w9_triangle_1<br/>n = 5 # 總共的行數<br/>space = '_'<br/>for i in range(n): # 對於每一行<br/> # 印出空格<br/> print(space * (n - i - 1), end='') # 在每行前面印出空格<br/> # 印出星號<br/> print('*' * (2 * i + 1)) # 每行印出 2*i + 1 個星號<br/>1. space = '_'<br/>I. 這行的意思是將字元 '_' 賦值給變數 space。<br/>II. 這表示每次需要"空格"（或這裡使用的底線 _）時，我們會用變數 space 來代表它。這樣，程式碼更容易改動。例如，若想要改成真正的空格，只需將 space = ' ' 即可。<br/>for i in range(n):<br/>I. 這是一個循環，執行 n 次，這裡 n = 5，所以 i 會依序取值為 0, 1, 2, 3, 4。<br/>2. space * (n - i - 1):<br/>I. 這表示用字元space（即'_'）重複 (n - i - 1) 次，生成一個空格的字串。<br/>II. n 是總行數，i 是當前的行號（從 0 開始）。<br/>III. (n - i - 1) 是計算該行需要的空格數，保證星號輸出是居中的。<br/>3. end='':<br/>I. 預設情況下，print() 在輸出後會自動換行。<br/>II. 使用 end=''，可以讓這部分的輸出不換行，這樣星號可以緊接著空格輸出在同一行。<br/>4. '*':<br/>I. 這是星號字元，用來組成三角形的內容。<br/>5. * (乘號運算符號):<br/>I. 這裡的 * 是字串重複運算符號，將 '*' 重複指定的次數。<br/>6. (2 * i + 1):<br/>I. 每行星號的個數計算公式。<br/>II. 當前的行數為 i（從 0 開始計算）。<br/>III. 對於行數 i：<br/>* 星號數量是 2 * i + 1，表示每行的星號數量隨行數增加。<br/>* 比如：<br/>* 第 0 行（i = 0）：2 * 0 + 1 = 1，印出 1 個星號。<br/>* 第 1 行（i = 1）：2 * 1 + 1 = 3，印出 3 個星號。<br/>* 第 2 行（i = 2）：2 * 2 + 1 = 5，印出 5 個星號。<br/>* 依此類推。</p>
<p><br/>w9_triangle_2<br/>n = 5 # 定義金字塔的總行數，這裡我們用 n=5，表示金字塔共有 5 行<br/>space = '_'<br/># 第一部分：打印上半部 (包括中間行)<br/>for i in range(1, n + 1): # 從第1行到第n行，i代表行數<br/> # 這裡我們打印空格，讓星號可以靠右對齊<br/> # 空格數量是 (n - i)，因為第一行需要 4 個空格，第二行需要 3 個空格，以此類推<br/> print(space * (n - i), end='') # end='' 防止換行，讓星號和空格在同一行輸出</p>
<p># 打印星號。每一行的星號數量是 i，從 1 開始逐行增加<br/> # 第一行 1 顆星，第二行 2 顆星，第三行 3 顆星...這樣增加<br/> print('*' * i) # 每行輸出 i 個星號</p>
<p># 第二部分：打印下半部（去除中間行）<br/>for i in range(n - 1, 0, -1): # 這裡我們從 n-1 行開始，逐行減少星號數量<br/> # 空格的數量依然是 (n - i)，這是因為下半部的對稱性<br/> # 比如當 i=n-1 時，空格數量是 1，當 i=n-2 時，空格數量是 2<br/> print(space * (n - i), end='') # 同樣使用 end='' 來避免換行</p>
<p># 打印星號數量為 i，從 n-1 開始逐行減少<br/> # 所以當 i = n-1 時，打印 n-1 顆星，當 i = n-2 時，打印 n-2 顆星，依此類推<br/> print('*' * i) # 每行輸出 i 顆星號<br/><span style="color: #ff6600;">W11</span><br/>11x11 的字元區域中, 以 "*" 字元列印出圓型區域. <br/># 定義區域大小<br/>width = 11<br/>height = 11</p>
<p># 圓心位置<br/>center_x = width // 2 # 圓心 x 坐標，位於區域中間<br/>center_y = height // 2 # 圓心 y 坐標，位於區域中間</p>
<p># 圓的半徑<br/>radius = 5</p>
<p># 縱向縮放比例<br/>vertical_scale = 1 # 適當調整比例以接近圓形</p>
<p># 遍歷字元區域<br/>for y in range(height): # 每一行<br/> for x in range(width): # 每一列<br/> # 計算每個點與圓心的距離（考慮縮放比例）<br/> dx = x - center_x<br/> dy = (y - center_y) * vertical_scale # 縱向乘以縮放比例<br/> # 判斷是否在圓內<br/> if dx ** 2 + dy ** 2 &lt;= radius ** 2:<br/> print("*", end="") # 圓內點用 "*" 表示<br/> else:<br/> print(" ", end="") # 圓外點用空格表示<br/> print() # 換行</p>
<p>1. 定義區域大小<br/>I. 作用：定義文字區域的寬度和高度。<br/>* width：區域的總列數（水平寬度）。<br/>* height：區域的總行數（垂直高度）。<br/>II. 使用範例：<br/>* 當 width = 11 和 height = 11 時，文字區域是一個 11x11 的矩形。<br/>2. 計算圓心位置<br/>I. 作用：計算圓心在文字區域中的位置。<br/>* center_x：圓心的水平位置。<br/>* center_y：圓心的垂直位置。<br/>II. 計算方法：<br/>* 使用整數除法 //，將寬度或高度的一半作為圓心位置。<br/>* 例如：<br/>* 如果 width = 11，則 center_x = 11 // 2 = 5。<br/>* 如果 height = 11，則 center_y = 11 // 2 = 5。<br/>* 圓心位於區域的中心點 (5, 5)。<br/>3. 定義圓的半徑、縮放比例<br/>作用：<br/>I. radius：定義圓的半徑。<br/>* 半徑表示從圓心到圓周的距離。<br/>* 此處半徑為 5。<br/>II. vertical_scale：調整縱向縮放比例。<br/>* 值為 1 表示縱向比例與水平方向一致。<br/>* 可通過調整此值來壓縮或拉伸圓形。</p>
<p>4. 繪製圓形<br/>I. 外層迴圈：遍歷每一行<br/>* for y in range(height): <br/>* 作用：<br/>* 逐行遍歷文字區域中的每一行。<br/>* y 代表當前行的索引（從 0 開始）。<br/>* 範圍為 0 ~ height-1（共 11 行）。<br/>II. 內層迴圈：遍歷每一列<br/>* for x in range(width):<br/>* 作用：<br/>* 在每行中，逐列遍歷文字區域中的每個點。<br/>* x 代表當前列的索引（從 0 開始）。<br/>* 範圍為 0 ~ width-1（共 11 列）。</p>
<p>5. 計算點到圓心的距離<br/>I. 計算水平方向距離：<br/>* dx = x - center_x 表示該點與圓心在水平方向的距離。<br/>II. 計算垂直方向距離（考慮縮放）：<br/>* dy = (y - center_y) * vertical_scale 表示該點與圓心在垂直方向的距離。<br/>* 如果 vertical_scale = 1，則無縮放影響。</p>
<p>6. 判斷是否在圓內<br/>I. 距離公式：dx ** 2 + dy ** 2 計算該點到圓心的平方距離。<br/>* 如果平方距離小於或等於半徑的平方，則點位於圓內。<br/>* 否則，點在圓外。<br/>II. 輸出字符：<br/>* 圓內的點輸出 *。<br/>* 圓外的點輸出空格。<br/>III. end="" 的作用：<br/>* 防止自動換行，確保每行的字符緊密排列。</p>
<p>7. 每行結束後換行<br/>I. print(),作用：在每行的最後執行換行，使輸出結果呈現矩形區域。<br/>像素繪製圓形<br/>from browser import html<br/>from browser import document as doc</p>
<p># 利用 html 建立 canvas 超文件物件<br/>canvas = html.CANVAS(width=400, height=400)<br/>brython_div = doc["brython_div1"]<br/>brython_div &lt;= canvas</p>
<p># 每一格的 pixel 數<br/>gs = 20</p>
<p># canvas 的上下文<br/>ctx = canvas.getContext("2d")</p>
<p>def dRect(lux, luy, w, h, s=1, c="lightgrey"):<br/> """繪製網格框"""<br/> ctx.lineWidth = s<br/> ctx.strokeStyle = c<br/> ctx.beginPath()<br/> ctx.rect(lux, luy, w, h)<br/> ctx.stroke()</p>
<p>def grid(width, height, grid_pix):<br/> """繪製網格"""<br/> for i in range(width):<br/> for j in range(height):<br/> dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")</p>
<p>def fill(x, y, color):<br/> """填充顏色"""<br/> ctx.fillStyle = color<br/> ctx.fillRect(x * gs, y * gs, gs, gs)</p>
<p># 繪製網格<br/>grid(11, 11, gs)</p>
<p># 定義圓的參數<br/>width, height = 11, 11<br/>center_x, center_y = 5, 5 # 圓心座標（以網格單位表示）<br/>radius = 5 # 圓的半徑（以網格單位表示）</p>
<p># 填充圓形內部區域<br/>for y in range(height):<br/> for x in range(width):<br/> # 計算點到圓心的距離<br/> distance = ((x - center_x) ** 2 + (y - center_y) ** 2) ** 0.5<br/> if distance &lt;= radius:<br/> fill(x, y, "black")<br/>1. 前置設定<br/>I. canvas 和 brython_div：<br/>* Canvas:是一個 HTML5 Canvas 元素，設定寬高為 400 像素。<br/>* brython_div:是網頁上的一個 &lt;div&gt; 元素（ID 為 brython_div1）。<br/>* 用 &lt;= 把 canvas 加入到 brython_div 中，使它顯示在網頁上。<br/>II. gs：<br/>* gs = 20<br/>* 定義每個網格的大小為 20 像素。<br/>* 例如，11x11 網格中，每個網格為 20x20 像素。<br/>III. ctx：<br/>* ctx = canvas.getContext("2d")<br/>* ctx 是 Canvas 的繪圖上下文，允許我們使用 2D 繪圖工具繪製圖形。<br/>2. 繪製函數<br/>dRect 函數：繪製單個網格框<br/>I. def dRect(lux, luy, w, h, s=1, c="lightgrey"):<br/>* lux 和 luy：<br/>* 表示矩形左上角的 x 和 y 座標（lux 是橫向，luy 是縱向）。<br/>* 例如，lux=0, luy=0 則表示矩形從 Canvas 的左上角開始畫。<br/>* w 和 h：<br/>* w 是矩形的寬度，h 是矩形的高度。<br/>* 例如，w=50, h=30 則表示畫出一個寬 50 像素、高 30 像素的矩形。<br/>* s（可選，預設值為 1）：<br/>* 表示矩形邊框的線條寬度。<br/>* 預設值為 1，若要更粗的邊框，可以設為更大的值，例如 s=2。<br/>* c（可選，預設值為 "lightgrey"）：<br/>* 表示矩形邊框的顏色。<br/>* 預設為淺灰色（"lightgrey"），但可以改為其他顏色，例如 "black"、"red"。<br/>II. ctx.lineWidth = s<br/>* 設定邊框的線條寬度為 s。<br/>* 例如，若 s=2，邊框的粗細會加倍。<br/>III. ctx.strokeStyle = c<br/>* 設定邊框的顏色為 c。<br/>* 例如，若 c="red"，矩形的邊框顏色會變成紅色。<br/>IV. ctx.beginPath()<br/>* 開始一個新的繪圖路徑，確保繪製的圖形不會影響其他圖形。<br/>V. ctx.rect(lux, luy, w, h)<br/>* 在 Canvas 上定義一個矩形的路徑。<br/>* (lux, luy) 為矩形的左上角，w 為寬度，h 為高度。<br/>VI. ctx.stroke()<br/>* 使用之前設定的線條樣式和顏色，繪製出矩形的邊框。<br/>grid 函數：繪製整體網格<br/>def grid(width, height, grid_pix):<br/>I. width：<br/>* 表示網格的列數（橫向）。<br/>* 例如，width=10 表示網格有 10 列。<br/>II. height：<br/>* 表示網格的行數（縱向）。<br/>* 例如，height=10 表示網格有 10 行。<br/>III. grid_pix：<br/>* 表示每個網格的邊長（像素大小）。<br/>* 例如，grid_pix=20 表示每個網格是 20x20 像素的正方形。<br/>外層迴圈：處理網格的列數（橫向）<br/>* for i in range(width):<br/>* 作用：遍歷每一列（橫向位置）。<br/>* 變數 i 為列的索引（從 0 開始）。<br/>內層迴圈：處理網格的行數（縱向）<br/>* for j in range(height):<br/>* 作用：遍歷每一行（縱向位置）。<br/>* 變數 j 為行的索引（從 0 開始）。<br/>呼叫 dRect 繪製單個網格框<br/>* dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")<br/>I. i * grid_pix 和 j * grid_pix：<br/>* 計算每個網格左上角的 x 和 y 座標：<br/>* x 座標：i * grid_pix（列索引乘以網格大小）。<br/>* y 座標：j * grid_pix（行索引乘以網格大小）。<br/>II. grid_pix, grid_pix：<br/>* 設定矩形的寬度與高度（每個網格都是正方形）。<br/>III. 1：<br/>* 邊框的線條寬度設為 1 像素。<br/>IV. "lightgrey"：<br/>* 邊框顏色設為淺灰色。</p>
<p>fill 函數：填充指定網格<br/>fill 是一個用於填充指定網格單元的函數。該函數將在 Canvas 上的 (x, y) 格位置，繪製一個填滿顏色的矩形。<br/>x 和 y：<br/>* 這是目標網格的行列座標。<br/>* 例如，x = 3, y = 4 將會填充第 4 行、第 3 列的網格（以 0 為起始索引）。<br/>color：<br/>* 矩形填充的顏色，可以是任何有效的 CSS 顏色值（例如 "red", "#00FF00", "rgba(0, 0, 255, 0.5)" 等）。<br/>ctx.fillStyle = color<br/>* 使用 Canvas API 的 fillStyle 設置要繪製矩形的顏色。<br/>ctx.fillRect(x * gs, y * gs, gs, gs)<br/>* 使用 fillRect 方法在 Canvas 上繪製一個矩形：<br/>* x * gs 和 y * gs 是矩形的左上角座標。<br/>* gs 是每格的大小（20 像素），定義矩形的寬與高。</p>
<p><br/>3. 主程式邏輯<br/>I. 繪製 11x11 網格<br/>* grid(11, 11, gs)<br/>* 呼叫 grid 函數繪製 11x11 的網格，每格大小為 20x20 像素。<br/>II. 圓形參數設定<br/>* center_x, center_y = 5, 5 # 圓心座標<br/>* radius = 5 # 圓的半徑<br/>* 圓心位置設為 (5, 5)（對應網格中心）。<br/>* 半徑設定為 5（以網格為單位）。<br/>III. 填充圓形內部區域<br/>for y in range(height):<br/> for x in range(width):<br/> distance = ((x - center_x) ** 2 + (y - center_y) ** 2) ** 0.5<br/> if distance &lt;= radius:<br/> fill(x, y, "black")<br/>* 遍歷網格的每個點 (x, y)。<br/>* 計算到圓心的距離：<br/>* 使用公式：<br/>* 判斷是否在圓內：<br/>* 若 distance &lt;= radius，填充該格為黑色。</p>
<p></p>
<p>w16_exam1題目要求:<br/>以自己的學號最後四碼作為繪圖的座標原點, , 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 , 並自選下列圖形的起始點座標, 直接在頁面畫出圖像。</p>
<p>第一步驟:導入模組</p>
<p>1.browser.html：是 Brython 提供的模組，允許我們在 Python 中創建和操作 HTML 元素。 2.browser.document：對應網頁的 DOM（Document Object Model），可以用來操作 HTML 結構，例如獲取、修改或新增元素。<br/>第二步驟:建立畫布</p>
<p>1canvas = html.CANVAS(width=500, height=500)： 建立寬跟高的長度各為500像素的畫布。 2.brython_div = doc["brython_div1"]： 獲取網頁id="brython_div1" 的元素。 3.brython_div &lt;= canvas ： 將畫布加入到 brython_div1 中作為其子元素，&lt;= 是 Brython 特有的語法，表示「將右側元素添加到左側容器」。<br/>第三步驟:取得繪圖上下文</p>
<p>getContext("2d") 1.為畫布建立 2D 繪圖上下文（2D rendering context）。 2.允許我們繪製線條、矩形、圓形等圖形。 3.繪圖上下文 (ctx) 是一個接口，包含所有的繪圖方法和屬性。<br/>第四步驟:畫出X座標線</p>
<p>1.ctx.beginPath() 開始一條新的繪圖路徑，清除之前的路徑狀態。 2.ctx.strokeStyle = 'black' 設定線條顏色為黑色。 3.ctx.lineWidth = 2 設定線條的寬度為 2 像素。 4.ctx.moveTo(31, 45) 移動畫筆到座標 (31, 45)，不畫線。 5.ctx.lineTo(400, 45) 從 (31, 45) 畫一條直線到 (400, 45)。 6.ctx.stroke() 繪製路徑，使線條顯示在畫布上。<br/>第五步驟:標示X軸方向</p>
<p>1.ctx.font = "14px Arial" 設定文字的字體和大小為 14px Arial。 2.ctx.fillStyle = "black" 設定文字顏色為黑色。 3.ctx.fillText("X+", 410, 50) 在座標 (410, 50) 的位置繪製文字 "X+"，用來標示 X 軸的正方向。<br/>第六步驟:繪製 Y 軸座標線</p>
<p>1.ctx.beginPath() 開啟新路徑，準備繪製 Y 軸。 2.ctx.moveTo(31, 45) 將畫筆移動到 (31, 45)。 3.ctx.lineTo(31, 400) 繪製一條從 (31, 45) 到 (31, 400) 的垂直線。 4.ctx.stroke() 顯示 Y 軸。<br/>第七步驟:標示 Y 軸方向與原點</p>
<p>1.ctx.fillText("Y+", 10, 410) 在座標 (10, 410) 標示文字 "Y+"，表示 Y 軸的正方向。 2.ctx.font = "12px Arial" 將字體大小改為 12px，用於標示原點座標。 3.ctx.fillText("(31, 45)", 35, 35) 在 (35, 35) 標示文字 "(31, 45)"，表示原點座標。<br/>第八步驟:定義偏移基準點</p>
<p>1.定義偏移量，設定繪圖的基準點為 (31, 45)，後續所有圖形的座標都以這個基準點進行計算。<br/>第九步驟:繪製橙色六邊形</p>
<p></p>
<p>1.開始新路徑，設定填充顏色為橙色 #F47920。 2.定義六個頂點： 頂點座標是基於 offset_x 和 offset_y 計算的。 3.ctx.closePath() 自動將最後一個頂點與第一個頂點連接，形成封閉路徑。 4.ctx.fill() 填滿六邊形內部。<br/>繪製其他圖形<br/>類似於六邊形的步驟，透過 beginPath() 定義形狀，使用 moveTo() 和 lineTo() 繪製邊，最後用 fill() 填充顏色： 1.綠色菱形 四個頂點構成的封閉形狀，顏色為 #009F95。 2.藍色三角形 三個頂點構成的封閉形狀，顏色為 #40B4CB。 3.粉紅色圓形 使用 arc() 繪製一個圓心為 (offset_x + 220, offset_y + 63)、半徑為 20 的圓形。 4.黃色正方形 使用 rect() 在指定位置繪製一個 40x40 的正方形，顏色為 #FDD56A。 5.藍色矩形 使用 rect() 繪製一個 60x20 的矩形，顏色為 #003A70。<br/>程式輸出結果</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>w16_exam2題目要求<br/>以自己的學號最後四碼作為下列繪圖的左上方點座標, 並以紅色文字標示出該點座標 。 利用 pixel=2 的藍色直線, 自訂迷宮畫布大小, 直接在頁面畫出下列圖像,可以在各自的 Brython 頁面中繪出下列圖像。</p>
<p>第一步驟:導入模組</p>
<p>1.browser.html：是 Brython 提供的模組，允許我們在 Python 中創建和操作 HTML 元素。 2.browser.document：對應網頁的 DOM（Document Object Model），可以用來操作 HTML 結構，例如獲取、修改或新增元素。<br/>第二步驟:建立畫布</p>
<p>canvas = html.CANVAS(width=300, height=300)： 建立寬跟高的長度各為300像素的畫布。 brython_div = doc["brython_div1"]： 獲取網頁id="brython_div1" 的元素。 brython_div &lt;= canvas ： 將畫布加入到 brython_div1 中作為其子元素，&lt;= 是 Brython 特有的語法，表示「將右側元素添加到左側容器」。<br/>第三步驟:取得繪圖上下文</p>
<p>getContext("2d") 1.為畫布建立 2D 繪圖上下文（2D rendering context）。 2.允許我們繪製線條、矩形、圓形等圖形。 3.繪圖上下文 (ctx) 是一個接口，包含所有的繪圖方法和屬性。<br/>第四步驟:標示座標</p>
<p>ctx.font = "12px Arial" 文字大小為12pixel，字體為 "Arial" ctx.fillStyle = "red" 將字體顏色改為紅色 ctx.fillText("(31, 47)", 35, 40) 將"(31,47)"這行文字定位在(35,40)上<br/>第五步驟:定義線條屬性</p>
<p>ctx.strokeStyle = "blue" 設定線的顏色為藍色 ctx.lineWidth = 2 設定繪製線條的寬度為2<br/>第六步驟:開始繪製迷宮</p>
<p>offset_x= 31 X開頭偏移至(31,0) offset_y= 47 Y開頭偏移至(0,47)</p>
<p>ctx.beginPath() 清空當前路徑的狀態，開始新的繪圖操作 ctx.moveTo() 設定()為起點 ctx.lineTo() 畫一條線到()指定的點 (offset_x +@,offset_y+&amp;) 指定x偏移到@位置 指定y偏移到&amp;位置 (以下皆為相同) ctx.stroke() 繪製以上的線</p>
<p></p>
<p></p>
<p><br/>程式輸出結果</p>
<p>w16_exam3題目要求<br/>以自己的學號最後四碼作為下列繪圖的左上方點座標, 並以紅色文字標示出該點座標 。 利用 pixel=2 的藍色直線, 自訂迷宮畫布大小, 直接在頁面畫出下列圖像,並利用紅色連續線段標示從上方入口。(註: 由於exam3跟exam2雷同，故不重複操作， 只操作紅線畫出出口線)</p>
<p></p>
<p><br/>ctx.strokeStyle = "red" 設定線的顏色為"紅色" ctx.lineWidth = 2 設定繪製線條的寬度為2 ctx.beginPath() 清空當前路徑的狀態，開始新的繪圖操作 ctx.moveTo() 設定()為起點 ctx.lineTo() 畫一條線到()指定的點 (offset_x +@,offset_y+&amp;) 指定x偏移到@位置 指定y偏移到&amp;位置 (以下皆為相同) ctx.stroke() 繪製以上的線<br/>w16_exam3成品</p>
<p></p>
<p></p>
<p></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<div class="no-translate immersive-translate-toast-shadow-root" id="immersive-translate-toast-root" style="color-scheme: initial; forced-color-adjust: initial; mask: initial; math-depth: initial; position: initial; position-anchor: initial; text-size-adjust: initial; appearance: initial; color: initial; font: initial; font-palette: initial; font-synthesis: initial; inset-area: initial; position-area: initial; text-orientation: initial; text-rendering: initial; text-spacing-trim: initial; -webkit-font-smoothing: initial; -webkit-locale: initial; -webkit-text-orientation: initial; -webkit-writing-mode: initial; writing-mode: initial; zoom: initial; accent-color: initial; place-content: initial; place-items: initial; place-self: initial; alignment-baseline: initial; anchor-name: initial; animation-composition: initial; animation: initial; app-region: initial; aspect-ratio: initial; backdrop-filter: initial; backface-visibility: initial; background: initial; background-blend-mode: initial; baseline-shift: initial; baseline-source: initial; block-size: initial; border-block: initial; border: initial; border-radius: initial; border-collapse: initial; border-end-end-radius: initial; border-end-start-radius: initial; border-inline: initial; border-start-end-radius: initial; border-start-start-radius: initial; inset: initial; box-decoration-break: initial; box-shadow: initial; box-sizing: initial; break-after: initial; break-before: initial; break-inside: initial; buffered-rendering: initial; caption-side: initial; caret-color: initial; clear: initial; clip: initial; clip-path: initial; clip-rule: initial; color-interpolation: initial; color-interpolation-filters: initial; color-rendering: initial; columns: initial; column-fill: initial; gap: initial; column-rule: initial; column-span: initial; contain: initial; contain-intrinsic-block-size: initial; contain-intrinsic-size: initial; contain-intrinsic-inline-size: initial; container: initial; content: initial; content-visibility: initial; counter-increment: initial; counter-reset: initial; counter-set: initial; cursor: initial; cx: initial; cy: initial; d: initial; display: flex; dominant-baseline: initial; empty-cells: initial; field-sizing: initial; fill: initial; fill-opacity: initial; fill-rule: initial; filter: initial; flex: initial; flex-flow: initial; float: initial; flood-color: initial; flood-opacity: initial; grid: initial; grid-area: initial; height: initial; hyphenate-character: initial; hyphenate-limit-chars: initial; hyphens: initial; image-orientation: initial; image-rendering: initial; initial-letter: initial; inline-size: initial; inset-block: initial; inset-inline: initial; interpolate-size: initial; isolation: initial; letter-spacing: initial; lighting-color: initial; line-break: initial; list-style: initial; margin-block: initial; margin: initial; margin-inline: initial; marker: initial; mask-type: initial; math-shift: initial; math-style: initial; max-block-size: initial; max-height: initial; max-inline-size: initial; max-width: initial; min-block-size: initial; min-height: initial; min-inline-size: initial; min-width: initial; mix-blend-mode: initial; object-fit: initial; object-position: initial; object-view-box: initial; offset: initial; opacity: initial; order: initial; orphans: initial; outline: initial; outline-offset: initial; overflow-anchor: initial; overflow-clip-margin: initial; overflow-wrap: initial; overflow: initial; overlay: initial; overscroll-behavior-block: initial; overscroll-behavior-inline: initial; overscroll-behavior: initial; padding-block: initial; padding: initial; padding-inline: initial; page: initial; page-orientation: initial; paint-order: initial; perspective: initial; perspective-origin: initial; pointer-events: initial; position-try: initial; position-visibility: initial; quotes: initial; r: initial; resize: initial; rotate: initial; ruby-align: initial; ruby-position: initial; rx: initial; ry: initial; scale: initial; scroll-behavior: initial; scroll-margin-block: initial; scroll-margin: initial; scroll-margin-inline: initial; scroll-padding-block: initial; scroll-padding: initial; scroll-padding-inline: initial; scroll-snap-align: initial; scroll-snap-stop: initial; scroll-snap-type: initial; scroll-timeline: initial; scrollbar-color: initial; scrollbar-gutter: initial; scrollbar-width: initial; shape-image-threshold: initial; shape-margin: initial; shape-outside: initial; shape-rendering: initial; size: initial; speak: initial; stop-color: initial; stop-opacity: initial; stroke: initial; stroke-dasharray: initial; stroke-dashoffset: initial; stroke-linecap: initial; stroke-linejoin: initial; stroke-miterlimit: initial; stroke-opacity: initial; stroke-width: initial; tab-size: initial; table-layout: initial; text-align: initial; text-align-last: initial; text-anchor: initial; text-combine-upright: initial; text-decoration: initial; text-decoration-skip-ink: initial; text-emphasis: initial; text-emphasis-position: initial; text-indent: initial; text-overflow: initial; text-shadow: initial; text-transform: initial; text-underline-offset: initial; text-underline-position: initial; text-wrap: initial; timeline-scope: initial; touch-action: initial; transform: initial; transform-box: initial; transform-origin: initial; transform-style: initial; transition: initial; translate: initial; user-select: initial; vector-effect: initial; vertical-align: initial; view-timeline: initial; view-transition-class: initial; view-transition-name: initial; visibility: initial; border-spacing: initial; -webkit-box-align: initial; -webkit-box-decoration-break: initial; -webkit-box-direction: initial; -webkit-box-flex: initial; -webkit-box-ordinal-group: initial; -webkit-box-orient: initial; -webkit-box-pack: initial; -webkit-box-reflect: initial; -webkit-line-break: initial; -webkit-line-clamp: initial; -webkit-mask-box-image: initial; -webkit-print-color-adjust: initial; -webkit-rtl-ordering: initial; -webkit-ruby-position: initial; -webkit-tap-highlight-color: initial; -webkit-text-combine: initial; -webkit-text-decorations-in-effect: initial; -webkit-text-fill-color: initial; -webkit-text-security: initial; -webkit-text-stroke: initial; -webkit-user-drag: initial; white-space-collapse: initial; widows: initial; width: initial; will-change: initial; word-break: initial; word-spacing: initial; x: initial; y: initial; z-index: 2147483647;" translate="no"></div>
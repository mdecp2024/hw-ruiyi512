var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: github-ruiyi512 \n 個人網站: 41323107 \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n 程式碼逐行解釋：  \n a = "我已經會寫簡單的python 程式。" 這一行將字串 "我已經會寫簡單的python 程式。"  \n 賦值給變數 a。 for i in range(1, 11): 這是一個 for 迴圈，使用 range(1, 11) 生成從 1 到 10（不包含 11）的數字，並依次將每個數字賦值給變數 i。 \n  print(i, a) 在每次迴圈中，程式會執行 print() 函數，輸出當前的變數 i（數字）和變數 a（字串）的值。  \n 結果： 程式將輸出以下內容，每一行包含一個數字（從 1 到 10）和相同的字串：  \n 1 我已經會寫簡單的python 程式。  \n 2 我已經會寫簡單的python 程式。  \n 3 我已經會寫簡單的python 程式。  \n 4 我已經會寫簡單的python 程式。  \n 5 我已經會寫簡單的python 程式。  \n 6 我已經會寫簡單的python 程式。  \n 7 我已經會寫簡單的python 程式。  \n 8 我已經會寫簡單的python 程式。  \n 9 我已經會寫簡單的python 程式。  \n 10 我已經會寫簡單的python 程式。 \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w9', 'text': 'w9_triangle_1 \n https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html ?src= https://gist.githubusercontent.com/ruiyi512/d640283c79a5366218bf265c090391ee/raw/2d8084b606ae7ee1f1f66b9bd3e986f39d8740b5/w9_triangle_1.py \n \n w9_triangle_2 \n https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html ?src= https://gist.githubusercontent.com/ruiyi512/642a10389d1a38f70e8fe1c6d93dbe14/raw/edda1fe42edb23a71802bb87ce8dd0ce166ffaed/w9_triangle_2.py \n \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w10', 'text': '隨堂考試 \n 題目一:\xa0 \n Brython_triangle \n \n SciTE 編輯器_triangle \n \n 命令提示字元視窗_triangle \n \n Jupyter Lab_triangle \n \n Codespaces\xa0_triangle \n \n 題目二:\xa0 \n \n 題目三: \n \n \n 綜合心得: \n \xa0 \xa0 \xa0 同樣語言在不同環境下依然可以穩定運行真的很棒，使用者介面、存檔、開啟方式等對我而言都覺得還好，我學習數種CAD、CAE、CAM軟體，我認為相容性較為重要，連網的所以相對方便，但錄製時因為網路很差導致需要網路的線上版Jupyter Lab&Codespacestl超難用，學習五種環境依照當下狀態有更多選擇真的很棒。我很想將ESP使用網頁介面控制，查詢資料後也是使用C++還有網頁相互配合，這門課真的收穫滿滿，也很難用幾句話描述學習的東西，因為就是基礎，就是我需要的。 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '11x11 的字元區域中, 以 "*" 字元列印出圓型區域.\xa0 \n Round \n 改進 \n Round2 \n 像素繪製圓形 \n Pixel drawing circle_1 \n \n \n \n 解題過程與心得 \n \n 解題過程 \n \n \n 需求分析 初始目標是根據使用者的要求，使用 Brython 在 HTML 中實現一個可以互動繪圖的功能，具體需求如下： \n \n 繪製圓形，提供更細緻、更圓潤的效果。 \n 增加控制功能：可以動態調整格數、圓形的大小、位置和顏色。 \n 增加按鈕執行的功能，讓用戶操作更加便捷。 \n \n \n \n 功能拆解 \n \n 網格繪製 ：基於使用者指定的格數，實現畫布的動態網格化。 \n 圓形繪製 ：通過數學計算點與圓心的距離，實現圓形內部填充與邊緣漸變效果。 \n 顏色控制 ：添加顏色選擇器，通過 HEX 顏色轉換為 RGB 處理。 \n 互動功能 ：允許使用者點擊畫布或者輸入參數後執行畫圖。 \n 重繪功能 ：設置初始化按鈕，方便使用者清除畫布並重新配置。 \n \n \n \n 程式撰寫 \n \n 利用 Brython 實現畫布的繪圖邏輯，結合 HTML 的輸入框和按鈕構建互動式界面。 \n 通過  fill  函數處理每個格子的位置與顏色，確保繪製圓形時邊緣更加平滑。 \n 利用 Python 的邏輯控制流程來動態繪製圓形和重設畫布。 \n \n \n \n 測試與優化 \n \n 測試畫布的邊界行為，確保圓形在邊緣不會超出可視範圍。 \n 調整網格格數（5 至 50），驗證在不同分辨率下的圓形渲染效果。 \n 優化按鈕與輸入框的交互流程，讓界面操作更加直觀。 \n \n \n \n \n 心得 \n \n \n 挑戰 在限制條件下，要用 11x11 或更小的像素網格生成圓形，考驗了如何利用數學計算來處理邊緣的平滑度與透明度。需要對圓的方程式和漸變邏輯進行多次調整。 \n \n \n 解決方案 \n \n 引入  rgba  通道實現透明度處理，使得圓形的邊緣漸變更自然。 \n 設置靈活的參數輸入功能（如格數、顏色、圓心座標），增加了程式的泛用性。 \n \n \n \n 學習收穫 \n \n 掌握了 Brython 與 HTML 元件的結合使用，特別是在互動界面設計上的應用。 \n 深化了對幾何學的理解，尤其是圓形的數學描述和像素化渲染原理。 \n 瞭解了如何使用顏色模型進行動態圖形處理，讓程式具備更高的可玩性和用戶體驗。 \n \n \n \n 下一步優化方向 \n \n 增加更高階的幾何圖形支持，例如橢圓、多邊形等。 \n 引入滑桿或拖拽功能，讓使用者直接通過拖動滑桿調整參數值，進一步提升操作體驗。 \n 優化畫布效能，支持更大範圍的格數與畫布尺寸。 \n \n \n \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': 'for&print \xa01->5 \n \n https://mdecp2024.github.io/hw-ruiyi512/content/Brython.html?src= \n w12_1 \n w12_2 \n w12_3 \n w12_4 \n w12_5 \n w12_6 \n w12_7 \n w12_8 \n w12_9 \n w12_10 \n \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': ' 導入 brython 程式庫  \n \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n 建立畫布 \n \n \n \n \n 定義 create_canvas 函式。 \n html.CANVAS(width=500, height=500): 建立一個 500x500 像素的 HTML 畫布。 \n brython_div = doc["brython_div1"]: 將畫布加到 HTML 中一個 ID 為 brython_div1 的容器。 \n brython_div <= canvas: 把畫布元素添加到容器中。 \n return canvas: 返回建立的畫布對象。 \n \n 畫圖函式 \n \n 定義  draw_shapes ，接收畫布作為參數。 \n ctx = canvas.getContext("2d") : 獲取 2D 繪圖上下文，用於畫圖。 \n ctx.lineWidth = 4 : 設定線條寬度為 4。 \n \n 混合模式 \n \n ctx.globalCompositeOperation = "screen" : 設定混合模式為  screen ，用於實現顏色混合效果。 \n \n 繪製第一個圓形 \n \n ctx.strokeStyle = \'black\' : 設定圓形邊框顏色為黑色。 \n 定義  colors1  和  angles1 ，分別表示每個圓弧的顏色和起止角度。 \n for i in range(4): : 繪製四段圓弧。 \n ctx.arc(160, 160, 141, angles1[i][0], angles1[i][1]) : 繪製圓弧，圓心在  (160, 160) ，半徑為 141。 \n ctx.fillStyle = colors1[i] : 設定填充顏色。 \n ctx.fill() : 填充圓弧內部。 \n ctx.stroke() : 描繪圓弧邊框。 \n \n 繪製第二個圓形 \n \n 與第一個圓相同，繪製第二個圓，但位置為  (260, 260) ，並使用  colors2  和  angles2  定義的顏色與角度。 \n \n 繪製第一個方形中的三角形 \n \n 設定邊框顏色為紅色。 \n 使用  coords1  定義第一個方形內的兩個三角形頂點與填充顏色。 \n ctx.moveTo(*coord[0]) : 移動畫筆到三角形的第一個頂點。 \n ctx.lineTo(*coord[1])  和  ctx.lineTo(*coord[2]) : 繪製兩條邊。 \n ctx.fillStyle = coord[3] : 設定三角形填充顏色。 \n ctx.fill()  和  ctx.stroke() : 填充與描邊。 \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w15', 'text': '1. 從 1 累加到 100 \n 2. addto \n 題目要求與設計思考 \n 要求 ：設計一個函式  addto (start, end) ，將從  start  累加到  end  (包含  end  本身)。 \n 設計思考 ： \n \n \n Python 中累加整數區間最簡易的手法是使用  range()  函式生成序列，然後用  sum()  將其加總。 \n \n \n range(start, end+1)  會產生從  start  到  end  的所有整數值。 \n \n \n 最後將此序列直接套入  sum()  即可得到區間總和。 \n \n \n 程式碼範例 \n """addto"""\ndef addto(start, end):\n    return sum(range(start, end + 1))\n\n# 範例呼叫\nresult = addto(1, 100)\nprint(result)  # 輸出 5050\n \n 程式碼逐行解說 \n \n \n def addto(start, end): 定義一個函式名稱為  addto ，有兩個參數  start  與  end ，代表加總的起始值和結束值。 \n \n \n return sum(range(start, end + 1)) range(start, end+1)  會產生從  start  到  end  的整數序列。例如  range(1, 101)  代表 1 到 100。 sum(...)  會將  range()  所產生的整數相加。 使用  return  將計算結果回傳給呼叫端。 \n \n \n result = addto(1, 100) 呼叫  addto(1, 100) ，會得到 1 加到 100 的總和結果，預期是 5050。 \n \n \n print(result) 將計算的結果印出來。 \n \n \n \n 執行結果與心得 \n 執行後結果為  5050 ，符合數學上高斯求和公式  (100*101)/2  的結果。 透過內建函式  sum()  與  range() ，能快速且直觀地完成區間加總。 \n 3. add_only_even \n 題目要求與設計思考 \n 要求 ：設計一個函式  add_only_even(start, end) ，將從  start  累加到  end ，但只加偶數。 \n 設計思考 ： \n \n \n 除了使用  sum(range()) ，我們需要過濾只加偶數，因此有兩種思路： \n \n \n 使用條件判斷  if num % 2 == 0  在迴圈中累加。 \n \n \n 或使用 list comprehension 與 sum 搭配條件篩選。 \n \n \n \n \n 在此範例中，我們選擇單純迴圈判斷，較直觀易懂。 \n \n \n 程式碼範例 \n """add_only_even"""\ndef add_only_even(start, end):\n    total = 0\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            total += num\n    return total\n\n# 範例呼叫\nresult = add_only_even(1, 100)\nprint(result)  # 將輸出 2 + 4 + 6 + ... + 100 的和\n \n 程式碼逐行解說 \n \n \n def add_only_even(start, end): 定義函式  add_only_even ，接收兩個參數用於決定加總的範圍。 \n \n \n total = 0 初始化一個計數器變數  total  為 0，將用來累加符合條件的整數。 \n \n \n for num in range(start, end + 1): 使用  range(start, end+1)  從  start  整數循序到  end  整數進行迭代。 \n \n \n if num % 2 == 0: 使用  %  運算子判斷  num  是否為偶數（被2整除餘數為0即為偶數）。 \n \n \n total += num 如果是偶數，就將  num  的值加到  total  變數中，不斷累加。 \n \n \n return total 當迴圈結束後，將累加結果回傳。 \n \n \n result = add_only_even(1, 100) 呼叫該函式以計算 1 到 100 之間的偶數加總。 \n \n \n print(result) 印出結果。 \n \n \n 執行結果與心得 \n 執行後結果為  2550 。這是 2 + 4 + 6 + ... + 100 的總和。 過程中充分利用  if  條件與迴圈來篩選特定的值，對程式碼的控制流程很直覺明白。 \n 4. add_avoid_8 \n 題目要求與設計思考 \n 要求 ：設計一個函式  add_avoid_8(start, end) ，將從  start  累加到  end ，但凡是數字中出現  8  這個數字都要避開 (不加到總和中)。 \n 設計思考 ： \n \n \n 關鍵在於 "避開出現8的數字"。我們需對每個整數檢查其字串表現形式是否包含字元  \'8\' 。 \n \n \n 將整數  num  轉成字串  str(num) ，用  \'8\' in str(num)  來判斷是否包含8這個字元。 \n \n \n 若不包含  8 ，則將  num  累加。 \n \n \n 程式碼範例 \n def add_avoid_8(start, end):\n    total = 0\n    for num in range(start, end + 1):\n        if \'8\' not in str(num):\n            total += num\n    return total\n\nresult = add_avoid_8(1, 100)\nprint(result)  # 預計會把所有帶有8的數字如 8, 18, 28, 38, 48, 58, 68, 78, 80~89, 98 排除\n \n 程式碼逐行解說 \n \n \n def add_avoid_8(start, end): 定義函式名稱  add_avoid_8 ，有兩個參數  start 、 end 。 \n \n \n total = 0 將累加用的變數初始化為0。 \n \n \n for num in range(start, end + 1): 對從  start  到  end  間的每一個整數  num  進行迭代。 \n \n \n if \'8\' not in str(num): 將  num  轉為字串後，檢查字串中是否包含  8  字元。 若不包含，就表示此數字沒有出現數字「8」，符合條件。 \n \n \n total += num 若符合條件(不含8)，則將該  num  加入  total 。 \n \n \n return total 迴圈執行完畢後，回傳最終的累加結果。 \n \n \n result = add_avoid_8(1, 100) 呼叫該函式，以計算 1 到 100 中不含數字8的整數加總。 \n \n \n print(result) 印出結果。 \n \n \n 執行結果與心得 \n 執行後的結果會略小於 5050，因為移除了所有出現 8 的數字。 這個題目顯示了如何透過字串判斷來排除特定條件的數字，拓展了對整數篩選的思考方式。 實際執行後，可觀察結果，並藉此驗證程式碼邏輯的正確性，並可進一步測試其他範圍或條件。 \n (若欲得知實際結果，可執行程式碼。大致上，移除8、18、28、...、98及80~89共計19個數字，即移除的總和約為8 + 18 + 28 + 38 + 48 + 58 + 68 + 78 + (80到89的十個數字) + 98。透過實際執行，可確認結果正確性。) \n \n 增加條件，避開 3 數字 \n 題目要求與設計思考 \n 要求 ： 設計一個函式  add_avoid_8(start, end) ，從  start  加到  end  (包含  end )，但必須避開所有 數字中包含 \'8\' 或 \'3\'  的整數，也就是說，只要該數字包含 \'8\' 或 \'3\' 字元，該數字就不納入加總。 \n 設計思考 ： \n \n \n 原先範例中是檢查  \'8\' not in str(num)  決定是否跳過該數字。 \n \n \n 現在需要同時避開包含 \'8\' 與 \'3\' 的數字，因此條件需再加嚴格化，即檢查  \'8\'  與  \'3\'  都不在該數字字串中。 \n \n \n 可以利用  if \'8\' not in str(num) and \'3\' not in str(num):  來判斷該數字是否能納入加總。 \n \n \n 程式碼範例 \n def add_avoid_8(start, end):\n    total = 0\n    for num in range(start, end + 1):\n        # 檢查該數字字串中是否同時不含 \'8\' 和 \'3\'\n        if \'8\' not in str(num) and \'3\' not in str(num):\n            total += num\n    return total\n\n# 範例呼叫\nresult = add_avoid_8(1, 100)\nprint(result)  # 將避開所有包含 \'8\' 或 \'3\' 的數字\n \n 程式碼逐行解說 \n \n \n def add_avoid_8(start, end): 定義函式  add_avoid_8 ，接收兩個參數  start  與  end 。 \n \n \n total = 0 初始化加總計數器為 0。 \n \n \n for num in range(start, end + 1): 使用  range(start, end+1)  來逐一取得從  start  到  end  的每個整數  num 。 \n \n \n if \'8\' not in str(num) and \'3\' not in str(num): 將  num  轉成字串後檢查： \n \n \n \'8\' not in str(num) ：字串中不包含 \'8\' \n \n \n \'3\' not in str(num) ：字串中不包含 \'3\' \n 同時成立，表示該數字中不包含 8 與 3，符合納入加總的條件。 \n \n \n \n \n total += num 若通過篩選條件，將該數值累加到  total  中。 \n \n \n return total 當所有數字都檢視完後，回傳最終加總結果。 \n \n \n result = add_avoid_8(1, 100) 呼叫函式以計算從 1 到 100，避開包含 \'8\' 或 \'3\' 的數字之和。 \n \n \n print(result) 印出計算結果。 \n \n \n 執行結果與心得 \n 這樣的條件更嚴格，會在  1 ~ 100  中排除任何含有 \'8\' 或 \'3\' 的整數，例如： \n \n \n 所有帶有 \'3\' 的整數 (3, 13, 23, 30~39, 43, 53, 63, 73, 83, 93) \n \n \n 所有帶有 \'8\' 的整數 (8, 18, 28, 38, 48, 58, 68, 78, 80~89, 98) \n \n \n 執行後的結果會小於前面只避開 \'8\' 的版本。此範例更進一步演示了如何利用字串檢查的方法，同時排除多個條件。透過此練習，可以在需求變動下輕鬆地修改判斷條件以達成新要求。 \n  導入 brython 程式庫  \n \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n \n w16_exam1 \n  導入 brython 程式庫 (路徑請依實際專案需求調整)  \n \n \n  也可再次載入 (若上面有 /get_page/... 之類路徑)  \n \n \n  啟動 Brython  \n \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': 'w16_exam1 \n \n \n 結構化設計： \n \n 代碼清晰且層次分明，每一段都專注於繪製特定的元素，便於維護與調整。 \n 使用偏移量 ( offset_x  和  offset_y ) 將圖形定位相對於基準點，讓圖形的重新排列變得簡單直觀。 \n \n \n 多樣化形狀： \n \n 展現了如何利用 Canvas API 繪製多種幾何圖形（六邊形、菱形、三角形、圓形等）。 \n 顏色搭配鮮明，區分不同形狀，提升視覺效果。 \n \n \n 座標系統的應用： \n \n 通過繪製 X、Y 軸和標示原點座標，為整體設計提供了參考框架，便於後續的圖形定位。 \n \n \n Canvas API 的掌握： \n \n 熟練運用  moveTo 、 lineTo 、 arc  和  rect  等方法進行圖形繪製，展現了對 Canvas 基本功能的靈活應用。 學習收穫 \n \n 基礎圖形構建：  深入理解 Canvas 的繪圖模型，掌握從簡單線條到複雜幾何圖形的繪製方法。 \n 數學與編程的結合：  通過幾何計算（如角度、圓弧等）實現形狀的精確繪製，提升數學與編程結合的能力。 \n 圖形座標系統的應用：  透過偏移量與基準點的設置，靈活管理圖形的佈局與結構。 \n \n \n \n \n \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w16_exam2', 'text': "w16_exam2 \n 程式學習收穫： \n 改進方向與延伸運用： \n \n \n 互動式迷宮： \n \n \n 添加用戶輸入功能，例如使用鍵盤方向鍵控制迷宮中的移動。 \n \n \n 在迷宮起點和終點設置指示點，用不同顏色或標誌表示，增強迷宮的互動性。 \n \n \n \n \n 自動生成迷宮： \n \n \n 實現一個算法（如深度優先搜索或Prim's Algorithm），動態生成迷宮路徑，避免手動編碼迷宮結構。 \n \n \n 將生成的迷宮數據存儲為陣列結構，然後根據數據繪製圖形。 \n \n \n \n \n 色彩與動態： \n \n \n 在迷宮中使用不同的顏色表示牆壁、路徑和探索進度。 \n \n \n 添加動畫效果，逐步展示迷宮的解路徑。 \n \n \n \n \n 擴展功能： \n \n \n 將迷宮保存為圖像文件（例如  .png ）。 \n \n \n 添加計時器，讓用戶挑戰解迷宮的速度。 \n \n \n 設置障礙或陷阱增加挑戰難度。 \n \n \n \n \n \n \n Canvas API 的應用：  深入學習  beginPath() 、 moveTo()  和  lineTo()  等核心方法，掌握如何控制圖形繪製過程。 \n \n \n 代碼可讀性提升：  系統性地添加註解，讓代碼不僅對自己而且對團隊成員更容易理解和修改。 \n \n \n 邏輯規劃：  將迷宮分段繪製，條理清晰，提升了程式設計的規劃能力。 \n \n \n \n", 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'w16_exam3', 'text': 'w16_exam3 \n 起初透過chatgpt了解繪製code功能及語法，接著自行計算撰寫code，尋找對應的色碼輸入後，再將程式上傳。 整個學期讓我在課堂不只學習計算機程式的內容，也讓我學會更好運用gpt來學習，也不僅僅只是copy，而是不斷詢問不理解的地方來弭補知識不足，弭補英文弱的缺點，gpt也能將我不理解的地方進行加強備註，將來再看還是能看懂。 \n \n 靈活使用 HTML Canvas API 透過  ctx.beginPath()  等 API，可以有效管理繪圖路徑並避免線條相互干擾。此外，運用  moveTo  和  lineTo  等方法，清晰地描述迷宮的各部分結構，讓繪製過程井然有序。 \n 模組化與參數化設計 在程式中利用變數（如  origin_x  和  origin_y ），可以輕鬆調整整體迷宮的位置偏移，讓繪圖更靈活。這種參數化的設計有助於後續維護及擴展。 \n 走迷宮邏輯的規劃 使用單獨的區塊繪製走迷宮路徑，將每一步都以簡單的線條指令表示，讓迷宮的解法可視化，直觀易懂。 \n 色彩與線條設置 運用  strokeStyle  和  lineWidth ，明確區分迷宮框架與解路徑，提升圖形的可讀性和視覺效果。 \n 程式結構的清晰性 透過明確的註解，對程式的每個部分進行詳細解釋，這不僅方便日後檢視，也利於其他開發者理解。 \n 學習與應用 Canvas API 的實踐 這次實現迷宮繪製的過程提供了全面操作 Canvas 的實踐機會，涵蓋了基本線條繪製、文字繪製、色彩管理等多方面內容。 \n 改進空間 \n \n 可以將迷宮的結構數據化，使用陣列或物件表示迷宮結構，進一步提高程式的可重用性。 \n 自動生成迷宮路徑，增強互動性與挑戰性。 \n 增加迷宮的動畫效果，讓視覺呈現更動態化。 \n \n \n \n \n \n', 'tags': '', 'url': 'w16_exam3.html'}, {'title': '期末報告', 'text': '期末報告 \n 筆記 \n W7 a = "我已經會寫簡單的Python程式了" for i in range(1,11);  print(i,a) 第一行 1. 變數 a： I. a 是變數名稱，用來儲存資料。 II. 在 Python 中，變數可以儲存任何資料類型（例如字串、數字、列表等）。 2. 字串： I. "我已經會寫簡單的Python程式了" 是一個字串（String）。 II. 字串是以雙引號 " 或單引號 \' 包裹的文字資料。 3. 作用： I. 將這段文字儲存在變數 a 中，之後可以透過 a 來取用或操作這段文字。 \n 第二行 1. 關鍵字 for * for 是用來啟動一個循環的關鍵字。 * 它會依序迭代一個可迭代對象（例如列表、字串或範圍）。 2. 變數 i * i 是迴圈變數，每次迴圈時都會被賦予新的值。 * 在這段程式碼中，i 依次會取值 1 到 10（包含 1，但不包括 11）。 3. 函數 range(1, 11) I. range() 函數生成一個範圍對象。 II. 語法：range(start, stop, step) * start：起始值，這裡是 1。 * stop：結束值（不包含該值），這裡是 11。 * step（可選）：每次增量（預設為 1）。 III. 因此，range(1, 11) 生成的值為：1, 2, 3, 4, 5, 6, 7, 8, 9, 10。 4. 冒號 : I. 冒號用於結束 for 的語法並指示接下來是該迴圈內的程式塊。 \n 第三行 1. 在程式中，print(i, a) 的作用是： I. print：Python 的內建函式，用於輸出文字、數值或變數的內容。 II. i：迴圈變數，代表目前迴圈執行的數值（從 1 到 10）。 III. ,（逗號）：在 print 中，逗號用於分隔多個項目，會在輸出時以空格分隔。 IV. a：這是字串變數，內容是 "我已經會寫簡單的Python程式了"。 W9 w9_triangle_1 n = 5 # 總共的行數 space = \'_\' for i in range(n): # 對於每一行  # 印出空格  print(space * (n - i - 1), end=\'\') # 在每行前面印出空格  # 印出星號  print(\'*\' * (2 * i + 1)) # 每行印出 2*i + 1 個星號 1. space = \'_\' I. 這行的意思是將字元 \'_\' 賦值給變數 space。 II. 這表示每次需要"空格"（或這裡使用的底線 _）時，我們會用變數 space 來代表它。這樣，程式碼更容易改動。例如，若想要改成真正的空格，只需將 space = \' \' 即可。 for i in range(n): I. 這是一個循環，執行 n 次，這裡 n = 5，所以 i 會依序取值為 0, 1, 2, 3, 4。 2. space * (n - i - 1): I. 這表示用字元space（即\'_\'）重複 (n - i - 1) 次，生成一個空格的字串。 II. n 是總行數，i 是當前的行號（從 0 開始）。 III. (n - i - 1) 是計算該行需要的空格數，保證星號輸出是居中的。 3. end=\'\': I. 預設情況下，print() 在輸出後會自動換行。 II. 使用 end=\'\'，可以讓這部分的輸出不換行，這樣星號可以緊接著空格輸出在同一行。 4. \'*\': I. 這是星號字元，用來組成三角形的內容。 5. * (乘號運算符號): I. 這裡的 * 是字串重複運算符號，將 \'*\' 重複指定的次數。 6. (2 * i + 1): I. 每行星號的個數計算公式。 II. 當前的行數為 i（從 0 開始計算）。 III. 對於行數 i： * 星號數量是 2 * i + 1，表示每行的星號數量隨行數增加。 * 比如： * 第 0 行（i = 0）：2 * 0 + 1 = 1，印出 1 個星號。 * 第 1 行（i = 1）：2 * 1 + 1 = 3，印出 3 個星號。 * 第 2 行（i = 2）：2 * 2 + 1 = 5，印出 5 個星號。 * 依此類推。 \n w9_triangle_2 n = 5 # 定義金字塔的總行數，這裡我們用 n=5，表示金字塔共有 5 行 space = \'_\' # 第一部分：打印上半部 (包括中間行) for i in range(1, n + 1): # 從第1行到第n行，i代表行數  # 這裡我們打印空格，讓星號可以靠右對齊  # 空格數量是 (n - i)，因為第一行需要 4 個空格，第二行需要 3 個空格，以此類推  print(space * (n - i), end=\'\') # end=\'\' 防止換行，讓星號和空格在同一行輸出 \n # 打印星號。每一行的星號數量是 i，從 1 開始逐行增加  # 第一行 1 顆星，第二行 2 顆星，第三行 3 顆星...這樣增加  print(\'*\' * i) # 每行輸出 i 個星號 \n # 第二部分：打印下半部（去除中間行） for i in range(n - 1, 0, -1): # 這裡我們從 n-1 行開始，逐行減少星號數量  # 空格的數量依然是 (n - i)，這是因為下半部的對稱性  # 比如當 i=n-1 時，空格數量是 1，當 i=n-2 時，空格數量是 2  print(space * (n - i), end=\'\') # 同樣使用 end=\'\' 來避免換行 \n # 打印星號數量為 i，從 n-1 開始逐行減少  # 所以當 i = n-1 時，打印 n-1 顆星，當 i = n-2 時，打印 n-2 顆星，依此類推  print(\'*\' * i) # 每行輸出 i 顆星號 W11 11x11 的字元區域中, 以 "*" 字元列印出圓型區域.  # 定義區域大小 width = 11 height = 11 \n # 圓心位置 center_x = width // 2 # 圓心 x 坐標，位於區域中間 center_y = height // 2 # 圓心 y 坐標，位於區域中間 \n # 圓的半徑 radius = 5 \n # 縱向縮放比例 vertical_scale = 1 # 適當調整比例以接近圓形 \n # 遍歷字元區域 for y in range(height): # 每一行  for x in range(width): # 每一列  # 計算每個點與圓心的距離（考慮縮放比例）  dx = x - center_x  dy = (y - center_y) * vertical_scale # 縱向乘以縮放比例  # 判斷是否在圓內  if dx ** 2 + dy ** 2 <= radius ** 2:  print("*", end="") # 圓內點用 "*" 表示  else:  print(" ", end="") # 圓外點用空格表示  print() # 換行 \n 1. 定義區域大小 I. 作用：定義文字區域的寬度和高度。 * width：區域的總列數（水平寬度）。 * height：區域的總行數（垂直高度）。 II. 使用範例： * 當 width = 11 和 height = 11 時，文字區域是一個 11x11 的矩形。 2. 計算圓心位置 I. 作用：計算圓心在文字區域中的位置。 * center_x：圓心的水平位置。 * center_y：圓心的垂直位置。 II. 計算方法： * 使用整數除法 //，將寬度或高度的一半作為圓心位置。 * 例如： * 如果 width = 11，則 center_x = 11 // 2 = 5。 * 如果 height = 11，則 center_y = 11 // 2 = 5。 * 圓心位於區域的中心點 (5, 5)。 3. 定義圓的半徑、縮放比例 作用： I. radius：定義圓的半徑。 * 半徑表示從圓心到圓周的距離。 * 此處半徑為 5。 II. vertical_scale：調整縱向縮放比例。 * 值為 1 表示縱向比例與水平方向一致。 * 可通過調整此值來壓縮或拉伸圓形。 \n 4. 繪製圓形 I. 外層迴圈：遍歷每一行 * for y in range(height):  * 作用： * 逐行遍歷文字區域中的每一行。 * y 代表當前行的索引（從 0 開始）。 * 範圍為 0 ~ height-1（共 11 行）。 II. 內層迴圈：遍歷每一列 * for x in range(width): * 作用： * 在每行中，逐列遍歷文字區域中的每個點。 * x 代表當前列的索引（從 0 開始）。 * 範圍為 0 ~ width-1（共 11 列）。 \n 5. 計算點到圓心的距離 I. 計算水平方向距離： * dx = x - center_x 表示該點與圓心在水平方向的距離。 II. 計算垂直方向距離（考慮縮放）： * dy = (y - center_y) * vertical_scale 表示該點與圓心在垂直方向的距離。 * 如果 vertical_scale = 1，則無縮放影響。 \n 6. 判斷是否在圓內 I. 距離公式：dx ** 2 + dy ** 2 計算該點到圓心的平方距離。 * 如果平方距離小於或等於半徑的平方，則點位於圓內。 * 否則，點在圓外。 II. 輸出字符： * 圓內的點輸出 *。 * 圓外的點輸出空格。 III. end="" 的作用： * 防止自動換行，確保每行的字符緊密排列。 \n 7. 每行結束後換行 I. print(),作用：在每行的最後執行換行，使輸出結果呈現矩形區域。 像素繪製圓形 from browser import html from browser import document as doc \n # 利用 html 建立 canvas 超文件物件 canvas = html.CANVAS(width=400, height=400) brython_div = doc["brython_div1"] brython_div <= canvas \n # 每一格的 pixel 數 gs = 20 \n # canvas 的上下文 ctx = canvas.getContext("2d") \n def dRect(lux, luy, w, h, s=1, c="lightgrey"):  """繪製網格框"""  ctx.lineWidth = s  ctx.strokeStyle = c  ctx.beginPath()  ctx.rect(lux, luy, w, h)  ctx.stroke() \n def grid(width, height, grid_pix):  """繪製網格"""  for i in range(width):  for j in range(height):  dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey") \n def fill(x, y, color):  """填充顏色"""  ctx.fillStyle = color  ctx.fillRect(x * gs, y * gs, gs, gs) \n # 繪製網格 grid(11, 11, gs) \n # 定義圓的參數 width, height = 11, 11 center_x, center_y = 5, 5 # 圓心座標（以網格單位表示） radius = 5 # 圓的半徑（以網格單位表示） \n # 填充圓形內部區域 for y in range(height):  for x in range(width):  # 計算點到圓心的距離  distance = ((x - center_x) ** 2 + (y - center_y) ** 2) ** 0.5  if distance <= radius:  fill(x, y, "black") 1. 前置設定 I. canvas 和 brython_div： * Canvas:是一個 HTML5 Canvas 元素，設定寬高為 400 像素。 * brython_div:是網頁上的一個 <div> 元素（ID 為 brython_div1）。 * 用 <= 把 canvas 加入到 brython_div 中，使它顯示在網頁上。 II. gs： * gs = 20 * 定義每個網格的大小為 20 像素。 * 例如，11x11 網格中，每個網格為 20x20 像素。 III. ctx： * ctx = canvas.getContext("2d") * ctx 是 Canvas 的繪圖上下文，允許我們使用 2D 繪圖工具繪製圖形。 2. 繪製函數 dRect 函數：繪製單個網格框 I. def dRect(lux, luy, w, h, s=1, c="lightgrey"): * lux 和 luy： * 表示矩形左上角的 x 和 y 座標（lux 是橫向，luy 是縱向）。 * 例如，lux=0, luy=0 則表示矩形從 Canvas 的左上角開始畫。 * w 和 h： * w 是矩形的寬度，h 是矩形的高度。 * 例如，w=50, h=30 則表示畫出一個寬 50 像素、高 30 像素的矩形。 * s（可選，預設值為 1）： * 表示矩形邊框的線條寬度。 * 預設值為 1，若要更粗的邊框，可以設為更大的值，例如 s=2。 * c（可選，預設值為 "lightgrey"）： * 表示矩形邊框的顏色。 * 預設為淺灰色（"lightgrey"），但可以改為其他顏色，例如 "black"、"red"。 II. ctx.lineWidth = s * 設定邊框的線條寬度為 s。 * 例如，若 s=2，邊框的粗細會加倍。 III. ctx.strokeStyle = c * 設定邊框的顏色為 c。 * 例如，若 c="red"，矩形的邊框顏色會變成紅色。 IV. ctx.beginPath() * 開始一個新的繪圖路徑，確保繪製的圖形不會影響其他圖形。 V. ctx.rect(lux, luy, w, h) * 在 Canvas 上定義一個矩形的路徑。 * (lux, luy) 為矩形的左上角，w 為寬度，h 為高度。 VI. ctx.stroke() * 使用之前設定的線條樣式和顏色，繪製出矩形的邊框。 grid 函數：繪製整體網格 def grid(width, height, grid_pix): I. width： * 表示網格的列數（橫向）。 * 例如，width=10 表示網格有 10 列。 II. height： * 表示網格的行數（縱向）。 * 例如，height=10 表示網格有 10 行。 III. grid_pix： * 表示每個網格的邊長（像素大小）。 * 例如，grid_pix=20 表示每個網格是 20x20 像素的正方形。 外層迴圈：處理網格的列數（橫向） * for i in range(width): * 作用：遍歷每一列（橫向位置）。 * 變數 i 為列的索引（從 0 開始）。 內層迴圈：處理網格的行數（縱向） * for j in range(height): * 作用：遍歷每一行（縱向位置）。 * 變數 j 為行的索引（從 0 開始）。 呼叫 dRect 繪製單個網格框 * dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey") I. i * grid_pix 和 j * grid_pix： * 計算每個網格左上角的 x 和 y 座標： * x 座標：i * grid_pix（列索引乘以網格大小）。 * y 座標：j * grid_pix（行索引乘以網格大小）。 II. grid_pix, grid_pix： * 設定矩形的寬度與高度（每個網格都是正方形）。 III. 1： * 邊框的線條寬度設為 1 像素。 IV. "lightgrey"： * 邊框顏色設為淺灰色。 \n fill 函數：填充指定網格 fill 是一個用於填充指定網格單元的函數。該函數將在 Canvas 上的 (x, y) 格位置，繪製一個填滿顏色的矩形。 x 和 y： * 這是目標網格的行列座標。 * 例如，x = 3, y = 4 將會填充第 4 行、第 3 列的網格（以 0 為起始索引）。 color： * 矩形填充的顏色，可以是任何有效的 CSS 顏色值（例如 "red", "#00FF00", "rgba(0, 0, 255, 0.5)" 等）。 ctx.fillStyle = color * 使用 Canvas API 的 fillStyle 設置要繪製矩形的顏色。 ctx.fillRect(x * gs, y * gs, gs, gs) * 使用 fillRect 方法在 Canvas 上繪製一個矩形： * x * gs 和 y * gs 是矩形的左上角座標。 * gs 是每格的大小（20 像素），定義矩形的寬與高。 \n 3. 主程式邏輯 I. 繪製 11x11 網格 * grid(11, 11, gs) * 呼叫 grid 函數繪製 11x11 的網格，每格大小為 20x20 像素。 II. 圓形參數設定 * center_x, center_y = 5, 5 # 圓心座標 * radius = 5 # 圓的半徑 * 圓心位置設為 (5, 5)（對應網格中心）。 * 半徑設定為 5（以網格為單位）。 III. 填充圓形內部區域 for y in range(height):  for x in range(width):  distance = ((x - center_x) ** 2 + (y - center_y) ** 2) ** 0.5  if distance <= radius:  fill(x, y, "black") * 遍歷網格的每個點 (x, y)。 * 計算到圓心的距離： * 使用公式： * 判斷是否在圓內： * 若 distance <= radius，填充該格為黑色。 \n \n w16_exam1題目要求: 以自己的學號最後四碼作為繪圖的座標原點, , 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 , 並自選下列圖形的起始點座標, 直接在頁面畫出圖像。 \n 第一步驟:導入模組 \n 1.browser.html：是 Brython 提供的模組，允許我們在 Python 中創建和操作 HTML 元素。 2.browser.document：對應網頁的 DOM（Document Object Model），可以用來操作 HTML 結構，例如獲取、修改或新增元素。 第二步驟:建立畫布 \n 1canvas = html.CANVAS(width=500, height=500)： 建立寬跟高的長度各為500像素的畫布。 2.brython_div = doc["brython_div1"]： 獲取網頁id="brython_div1" 的元素。 3.brython_div <= canvas ： 將畫布加入到 brython_div1 中作為其子元素，<= 是 Brython 特有的語法，表示「將右側元素添加到左側容器」。 第三步驟:取得繪圖上下文 \n getContext("2d") 1.為畫布建立 2D 繪圖上下文（2D rendering context）。 2.允許我們繪製線條、矩形、圓形等圖形。 3.繪圖上下文 (ctx) 是一個接口，包含所有的繪圖方法和屬性。 第四步驟:畫出X座標線 \n 1.ctx.beginPath() 開始一條新的繪圖路徑，清除之前的路徑狀態。 2.ctx.strokeStyle = \'black\' 設定線條顏色為黑色。 3.ctx.lineWidth = 2 設定線條的寬度為 2 像素。 4.ctx.moveTo(31, 45) 移動畫筆到座標 (31, 45)，不畫線。 5.ctx.lineTo(400, 45) 從 (31, 45) 畫一條直線到 (400, 45)。 6.ctx.stroke() 繪製路徑，使線條顯示在畫布上。 第五步驟:標示X軸方向 \n 1.ctx.font = "14px Arial" 設定文字的字體和大小為 14px Arial。 2.ctx.fillStyle = "black" 設定文字顏色為黑色。 3.ctx.fillText("X+", 410, 50) 在座標 (410, 50) 的位置繪製文字 "X+"，用來標示 X 軸的正方向。 第六步驟:繪製 Y 軸座標線 \n 1.ctx.beginPath() 開啟新路徑，準備繪製 Y 軸。 2.ctx.moveTo(31, 45) 將畫筆移動到 (31, 45)。 3.ctx.lineTo(31, 400) 繪製一條從 (31, 45) 到 (31, 400) 的垂直線。 4.ctx.stroke() 顯示 Y 軸。 第七步驟:標示 Y 軸方向與原點 \n 1.ctx.fillText("Y+", 10, 410) 在座標 (10, 410) 標示文字 "Y+"，表示 Y 軸的正方向。 2.ctx.font = "12px Arial" 將字體大小改為 12px，用於標示原點座標。 3.ctx.fillText("(31, 45)", 35, 35) 在 (35, 35) 標示文字 "(31, 45)"，表示原點座標。 第八步驟:定義偏移基準點 \n 1.定義偏移量，設定繪圖的基準點為 (31, 45)，後續所有圖形的座標都以這個基準點進行計算。 第九步驟:繪製橙色六邊形 \n \n 1.開始新路徑，設定填充顏色為橙色 #F47920。 2.定義六個頂點： 頂點座標是基於 offset_x 和 offset_y 計算的。 3.ctx.closePath() 自動將最後一個頂點與第一個頂點連接，形成封閉路徑。 4.ctx.fill() 填滿六邊形內部。 繪製其他圖形 類似於六邊形的步驟，透過 beginPath() 定義形狀，使用 moveTo() 和 lineTo() 繪製邊，最後用 fill() 填充顏色： 1.綠色菱形 四個頂點構成的封閉形狀，顏色為 #009F95。 2.藍色三角形 三個頂點構成的封閉形狀，顏色為 #40B4CB。 3.粉紅色圓形 使用 arc() 繪製一個圓心為 (offset_x + 220, offset_y + 63)、半徑為 20 的圓形。 4.黃色正方形 使用 rect() 在指定位置繪製一個 40x40 的正方形，顏色為 #FDD56A。 5.藍色矩形 使用 rect() 繪製一個 60x20 的矩形，顏色為 #003A70。 程式輸出結果 \n \n \n \n \n w16_exam2題目要求 以自己的學號最後四碼作為下列繪圖的左上方點座標, 並以紅色文字標示出該點座標 。 利用 pixel=2 的藍色直線, 自訂迷宮畫布大小, 直接在頁面畫出下列圖像,可以在各自的 Brython 頁面中繪出下列圖像。 \n 第一步驟:導入模組 \n 1.browser.html：是 Brython 提供的模組，允許我們在 Python 中創建和操作 HTML 元素。 2.browser.document：對應網頁的 DOM（Document Object Model），可以用來操作 HTML 結構，例如獲取、修改或新增元素。 第二步驟:建立畫布 \n canvas = html.CANVAS(width=300, height=300)： 建立寬跟高的長度各為300像素的畫布。 brython_div = doc["brython_div1"]： 獲取網頁id="brython_div1" 的元素。 brython_div <= canvas ： 將畫布加入到 brython_div1 中作為其子元素，<= 是 Brython 特有的語法，表示「將右側元素添加到左側容器」。 第三步驟:取得繪圖上下文 \n getContext("2d") 1.為畫布建立 2D 繪圖上下文（2D rendering context）。 2.允許我們繪製線條、矩形、圓形等圖形。 3.繪圖上下文 (ctx) 是一個接口，包含所有的繪圖方法和屬性。 第四步驟:標示座標 \n ctx.font = "12px Arial" 文字大小為12pixel，字體為 "Arial" ctx.fillStyle = "red" 將字體顏色改為紅色 ctx.fillText("(31, 47)", 35, 40) 將"(31,47)"這行文字定位在(35,40)上 第五步驟:定義線條屬性 \n ctx.strokeStyle = "blue" 設定線的顏色為藍色 ctx.lineWidth = 2 設定繪製線條的寬度為2 第六步驟:開始繪製迷宮 \n offset_x= 31 X開頭偏移至(31,0) offset_y= 47 Y開頭偏移至(0,47) \n ctx.beginPath() 清空當前路徑的狀態，開始新的繪圖操作 ctx.moveTo() 設定()為起點 ctx.lineTo() 畫一條線到()指定的點 (offset_x +@,offset_y+&) 指定x偏移到@位置 指定y偏移到&位置 (以下皆為相同) ctx.stroke() 繪製以上的線 \n \n \n 程式輸出結果 \n w16_exam3題目要求 以自己的學號最後四碼作為下列繪圖的左上方點座標, 並以紅色文字標示出該點座標 。 利用 pixel=2 的藍色直線, 自訂迷宮畫布大小, 直接在頁面畫出下列圖像,並利用紅色連續線段標示從上方入口。(註: 由於exam3跟exam2雷同，故不重複操作， 只操作紅線畫出出口線) \n \n ctx.strokeStyle = "red" 設定線的顏色為"紅色" ctx.lineWidth = 2 設定繪製線條的寬度為2 ctx.beginPath() 清空當前路徑的狀態，開始新的繪圖操作 ctx.moveTo() 設定()為起點 ctx.lineTo() 畫一條線到()指定的點 (offset_x +@,offset_y+&) 指定x偏移到@位置 指定y偏移到&位置 (以下皆為相同) ctx.stroke() 繪製以上的線 w16_exam3成品 \n \n \n \n', 'tags': '', 'url': '期末報告.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};